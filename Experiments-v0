{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# Prepare the Test Data\n"],"metadata":{"id":"YsmYePizPge0"}},{"cell_type":"code","source":["!pip install langchain"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xzIGqnCW2r32","executionInfo":{"status":"ok","timestamp":1700910504924,"user_tz":-330,"elapsed":6796,"user":{"displayName":"GAUTAM SETHIA","userId":"10968948203273828665"}},"outputId":"7bb85b93-4523-4810-a75f-f185c326ea57"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: langchain in /usr/local/lib/python3.10/dist-packages (0.0.340)\n","Requirement already satisfied: PyYAML>=5.3 in /usr/local/lib/python3.10/dist-packages (from langchain) (6.0.1)\n","Requirement already satisfied: SQLAlchemy<3,>=1.4 in /usr/local/lib/python3.10/dist-packages (from langchain) (2.0.23)\n","Requirement already satisfied: aiohttp<4.0.0,>=3.8.3 in /usr/local/lib/python3.10/dist-packages (from langchain) (3.8.6)\n","Requirement already satisfied: anyio<4.0 in /usr/local/lib/python3.10/dist-packages (from langchain) (3.7.1)\n","Requirement already satisfied: async-timeout<5.0.0,>=4.0.0 in /usr/local/lib/python3.10/dist-packages (from langchain) (4.0.3)\n","Requirement already satisfied: dataclasses-json<0.7,>=0.5.7 in /usr/local/lib/python3.10/dist-packages (from langchain) (0.6.2)\n","Requirement already satisfied: jsonpatch<2.0,>=1.33 in /usr/local/lib/python3.10/dist-packages (from langchain) (1.33)\n","Requirement already satisfied: langsmith<0.1.0,>=0.0.63 in /usr/local/lib/python3.10/dist-packages (from langchain) (0.0.66)\n","Requirement already satisfied: numpy<2,>=1 in /usr/local/lib/python3.10/dist-packages (from langchain) (1.23.5)\n","Requirement already satisfied: pydantic<3,>=1 in /usr/local/lib/python3.10/dist-packages (from langchain) (1.10.13)\n","Requirement already satisfied: requests<3,>=2 in /usr/local/lib/python3.10/dist-packages (from langchain) (2.31.0)\n","Requirement already satisfied: tenacity<9.0.0,>=8.1.0 in /usr/local/lib/python3.10/dist-packages (from langchain) (8.2.3)\n","Requirement already satisfied: attrs>=17.3.0 in /usr/local/lib/python3.10/dist-packages (from aiohttp<4.0.0,>=3.8.3->langchain) (23.1.0)\n","Requirement already satisfied: charset-normalizer<4.0,>=2.0 in /usr/local/lib/python3.10/dist-packages (from aiohttp<4.0.0,>=3.8.3->langchain) (3.3.2)\n","Requirement already satisfied: multidict<7.0,>=4.5 in /usr/local/lib/python3.10/dist-packages (from aiohttp<4.0.0,>=3.8.3->langchain) (6.0.4)\n","Requirement already satisfied: yarl<2.0,>=1.0 in /usr/local/lib/python3.10/dist-packages (from aiohttp<4.0.0,>=3.8.3->langchain) (1.9.2)\n","Requirement already satisfied: frozenlist>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from aiohttp<4.0.0,>=3.8.3->langchain) (1.4.0)\n","Requirement already satisfied: aiosignal>=1.1.2 in /usr/local/lib/python3.10/dist-packages (from aiohttp<4.0.0,>=3.8.3->langchain) (1.3.1)\n","Requirement already satisfied: idna>=2.8 in /usr/local/lib/python3.10/dist-packages (from anyio<4.0->langchain) (3.4)\n","Requirement already satisfied: sniffio>=1.1 in /usr/local/lib/python3.10/dist-packages (from anyio<4.0->langchain) (1.3.0)\n","Requirement already satisfied: exceptiongroup in /usr/local/lib/python3.10/dist-packages (from anyio<4.0->langchain) (1.1.3)\n","Requirement already satisfied: marshmallow<4.0.0,>=3.18.0 in /usr/local/lib/python3.10/dist-packages (from dataclasses-json<0.7,>=0.5.7->langchain) (3.20.1)\n","Requirement already satisfied: typing-inspect<1,>=0.4.0 in /usr/local/lib/python3.10/dist-packages (from dataclasses-json<0.7,>=0.5.7->langchain) (0.9.0)\n","Requirement already satisfied: jsonpointer>=1.9 in /usr/local/lib/python3.10/dist-packages (from jsonpatch<2.0,>=1.33->langchain) (2.4)\n","Requirement already satisfied: typing-extensions>=4.2.0 in /usr/local/lib/python3.10/dist-packages (from pydantic<3,>=1->langchain) (4.5.0)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2->langchain) (2.0.7)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2->langchain) (2023.7.22)\n","Requirement already satisfied: greenlet!=0.4.17 in /usr/local/lib/python3.10/dist-packages (from SQLAlchemy<3,>=1.4->langchain) (3.0.1)\n","Requirement already satisfied: packaging>=17.0 in /usr/local/lib/python3.10/dist-packages (from marshmallow<4.0.0,>=3.18.0->dataclasses-json<0.7,>=0.5.7->langchain) (23.2)\n","Requirement already satisfied: mypy-extensions>=0.3.0 in /usr/local/lib/python3.10/dist-packages (from typing-inspect<1,>=0.4.0->dataclasses-json<0.7,>=0.5.7->langchain) (1.0.0)\n"]}]},{"cell_type":"code","source":["!pip install sentence_transformers"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"S0p2bcH9Gmzr","executionInfo":{"status":"ok","timestamp":1700910516374,"user_tz":-330,"elapsed":11460,"user":{"displayName":"GAUTAM SETHIA","userId":"10968948203273828665"}},"outputId":"f571bff5-37dc-48dd-8b91-7e2151d7498a"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting sentence_transformers\n","  Downloading sentence-transformers-2.2.2.tar.gz (85 kB)\n","\u001b[?25l     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m0.0/86.0 kB\u001b[0m \u001b[31m?\u001b[0m eta \u001b[36m-:--:--\u001b[0m\r\u001b[2K     \u001b[91m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[90m╺\u001b[0m\u001b[90m━\u001b[0m \u001b[32m81.9/86.0 kB\u001b[0m \u001b[31m2.4 MB/s\u001b[0m eta \u001b[36m0:00:01\u001b[0m\r\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m86.0/86.0 kB\u001b[0m \u001b[31m2.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25h  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n","Requirement already satisfied: transformers<5.0.0,>=4.6.0 in /usr/local/lib/python3.10/dist-packages (from sentence_transformers) (4.35.2)\n","Requirement already satisfied: tqdm in /usr/local/lib/python3.10/dist-packages (from sentence_transformers) (4.66.1)\n","Requirement already satisfied: torch>=1.6.0 in /usr/local/lib/python3.10/dist-packages (from sentence_transformers) (2.1.0+cu118)\n","Requirement already satisfied: torchvision in /usr/local/lib/python3.10/dist-packages (from sentence_transformers) (0.16.0+cu118)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from sentence_transformers) (1.23.5)\n","Requirement already satisfied: scikit-learn in /usr/local/lib/python3.10/dist-packages (from sentence_transformers) (1.2.2)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.10/dist-packages (from sentence_transformers) (1.11.3)\n","Requirement already satisfied: nltk in /usr/local/lib/python3.10/dist-packages (from sentence_transformers) (3.8.1)\n","Collecting sentencepiece (from sentence_transformers)\n","  Downloading sentencepiece-0.1.99-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (1.3 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.3/1.3 MB\u001b[0m \u001b[31m16.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: huggingface-hub>=0.4.0 in /usr/local/lib/python3.10/dist-packages (from sentence_transformers) (0.19.4)\n","Requirement already satisfied: filelock in /usr/local/lib/python3.10/dist-packages (from huggingface-hub>=0.4.0->sentence_transformers) (3.13.1)\n","Requirement already satisfied: fsspec>=2023.5.0 in /usr/local/lib/python3.10/dist-packages (from huggingface-hub>=0.4.0->sentence_transformers) (2023.6.0)\n","Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from huggingface-hub>=0.4.0->sentence_transformers) (2.31.0)\n","Requirement already satisfied: pyyaml>=5.1 in /usr/local/lib/python3.10/dist-packages (from huggingface-hub>=0.4.0->sentence_transformers) (6.0.1)\n","Requirement already satisfied: typing-extensions>=3.7.4.3 in /usr/local/lib/python3.10/dist-packages (from huggingface-hub>=0.4.0->sentence_transformers) (4.5.0)\n","Requirement already satisfied: packaging>=20.9 in /usr/local/lib/python3.10/dist-packages (from huggingface-hub>=0.4.0->sentence_transformers) (23.2)\n","Requirement already satisfied: sympy in /usr/local/lib/python3.10/dist-packages (from torch>=1.6.0->sentence_transformers) (1.12)\n","Requirement already satisfied: networkx in /usr/local/lib/python3.10/dist-packages (from torch>=1.6.0->sentence_transformers) (3.2.1)\n","Requirement already satisfied: jinja2 in /usr/local/lib/python3.10/dist-packages (from torch>=1.6.0->sentence_transformers) (3.1.2)\n","Requirement already satisfied: triton==2.1.0 in /usr/local/lib/python3.10/dist-packages (from torch>=1.6.0->sentence_transformers) (2.1.0)\n","Requirement already satisfied: regex!=2019.12.17 in /usr/local/lib/python3.10/dist-packages (from transformers<5.0.0,>=4.6.0->sentence_transformers) (2023.6.3)\n","Requirement already satisfied: tokenizers<0.19,>=0.14 in /usr/local/lib/python3.10/dist-packages (from transformers<5.0.0,>=4.6.0->sentence_transformers) (0.15.0)\n","Requirement already satisfied: safetensors>=0.3.1 in /usr/local/lib/python3.10/dist-packages (from transformers<5.0.0,>=4.6.0->sentence_transformers) (0.4.0)\n","Requirement already satisfied: click in /usr/local/lib/python3.10/dist-packages (from nltk->sentence_transformers) (8.1.7)\n","Requirement already satisfied: joblib in /usr/local/lib/python3.10/dist-packages (from nltk->sentence_transformers) (1.3.2)\n","Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn->sentence_transformers) (3.2.0)\n","Requirement already satisfied: pillow!=8.3.*,>=5.3.0 in /usr/local/lib/python3.10/dist-packages (from torchvision->sentence_transformers) (9.4.0)\n","Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from jinja2->torch>=1.6.0->sentence_transformers) (2.1.3)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests->huggingface-hub>=0.4.0->sentence_transformers) (3.3.2)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests->huggingface-hub>=0.4.0->sentence_transformers) (3.4)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests->huggingface-hub>=0.4.0->sentence_transformers) (2.0.7)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests->huggingface-hub>=0.4.0->sentence_transformers) (2023.7.22)\n","Requirement already satisfied: mpmath>=0.19 in /usr/local/lib/python3.10/dist-packages (from sympy->torch>=1.6.0->sentence_transformers) (1.3.0)\n","Building wheels for collected packages: sentence_transformers\n","  Building wheel for sentence_transformers (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for sentence_transformers: filename=sentence_transformers-2.2.2-py3-none-any.whl size=125923 sha256=8a2d8db06e38b589f607030d22d40f6396e5c7c831932ede3648bbbb2586dcbf\n","  Stored in directory: /root/.cache/pip/wheels/62/f2/10/1e606fd5f02395388f74e7462910fe851042f97238cbbd902f\n","Successfully built sentence_transformers\n","Installing collected packages: sentencepiece, sentence_transformers\n","Successfully installed sentence_transformers-2.2.2 sentencepiece-0.1.99\n"]}]},{"cell_type":"code","source":["!pip install openai"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MgGKb0_c22vO","executionInfo":{"status":"ok","timestamp":1700910525722,"user_tz":-330,"elapsed":9357,"user":{"displayName":"GAUTAM SETHIA","userId":"10968948203273828665"}},"outputId":"e6be3654-ab13-40bc-c593-baac857edec6"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting openai\n","  Downloading openai-1.3.5-py3-none-any.whl (220 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m220.8/220.8 kB\u001b[0m \u001b[31m2.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: anyio<4,>=3.5.0 in /usr/local/lib/python3.10/dist-packages (from openai) (3.7.1)\n","Requirement already satisfied: distro<2,>=1.7.0 in /usr/lib/python3/dist-packages (from openai) (1.7.0)\n","Collecting httpx<1,>=0.23.0 (from openai)\n","  Downloading httpx-0.25.2-py3-none-any.whl (74 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m75.0/75.0 kB\u001b[0m \u001b[31m8.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: pydantic<3,>=1.9.0 in /usr/local/lib/python3.10/dist-packages (from openai) (1.10.13)\n","Requirement already satisfied: tqdm>4 in /usr/local/lib/python3.10/dist-packages (from openai) (4.66.1)\n","Requirement already satisfied: typing-extensions<5,>=4.5 in /usr/local/lib/python3.10/dist-packages (from openai) (4.5.0)\n","Requirement already satisfied: idna>=2.8 in /usr/local/lib/python3.10/dist-packages (from anyio<4,>=3.5.0->openai) (3.4)\n","Requirement already satisfied: sniffio>=1.1 in /usr/local/lib/python3.10/dist-packages (from anyio<4,>=3.5.0->openai) (1.3.0)\n","Requirement already satisfied: exceptiongroup in /usr/local/lib/python3.10/dist-packages (from anyio<4,>=3.5.0->openai) (1.1.3)\n","Requirement already satisfied: certifi in /usr/local/lib/python3.10/dist-packages (from httpx<1,>=0.23.0->openai) (2023.7.22)\n","Collecting httpcore==1.* (from httpx<1,>=0.23.0->openai)\n","  Downloading httpcore-1.0.2-py3-none-any.whl (76 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m76.9/76.9 kB\u001b[0m \u001b[31m8.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting h11<0.15,>=0.13 (from httpcore==1.*->httpx<1,>=0.23.0->openai)\n","  Downloading h11-0.14.0-py3-none-any.whl (58 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m58.3/58.3 kB\u001b[0m \u001b[31m7.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hInstalling collected packages: h11, httpcore, httpx, openai\n","\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\n","llmx 0.0.15a0 requires cohere, which is not installed.\n","llmx 0.0.15a0 requires tiktoken, which is not installed.\u001b[0m\u001b[31m\n","\u001b[0mSuccessfully installed h11-0.14.0 httpcore-1.0.2 httpx-0.25.2 openai-1.3.5\n"]}]},{"cell_type":"code","source":["from google.colab import drive\n","import os\n","drive.mount('/content/drive')"],"metadata":{"id":"wOq8svkzKLnv"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["os.chdir(\"/content/drive/MyDrive/Tech.High.Devrev/utils\")\n","os.getcwd()"],"metadata":{"id":"HB25qTEe1M6X"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"iEHhUQQMJVGA"},"outputs":[],"source":["import pandas as pd\n","import itertools\n","import time\n","import random\n","import math\n","import os\n","import matplotlib.pyplot as plt\n","import json\n","\n","from customLangchain import Inference\n","from constants import template,all_tools\n"]},{"cell_type":"code","source":["# Get inference\n"],"metadata":{"id":"1FECv0lWGXPY"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["original_df = pd.read_csv('/content/drive/MyDrive/Tech.High.Devrev/Data/test_v0.csv')\n","df = original_df.sample(n=5, random_state=42)\n","df = df.reset_index(drop=True)\n","df"],"metadata":{"id":"6rpn6xjyKKPe"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def process_output(input_string) :\n","  try :\n","    input_string = input_string.strip()\n","    output_map = json.loads(input_string)\n","    return output_map\n","  except :\n","    return {}"],"metadata":{"id":"grFfC9LCN2vG"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df['Output_map'] = df['Output'].apply(process_output)\n","result_map = df.set_index('Query')['Output_map'].to_dict()\n","result_map"],"metadata":{"id":"NN2weX1BOEeD"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["queries_with_empty_map = [query for query, value in result_map.items() if value == {}]\n","\n","if queries_with_empty_map:\n","    print(\"Queries with an empty map as value:\")\n","    for query in queries_with_empty_map:\n","        print(query)\n","else:\n","    print(\"No queries with an empty map as value found.\")"],"metadata":{"id":"oc6XkkqkMUec"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Define the evaluation method"],"metadata":{"id":"crS-dpqrPl1y"}},{"cell_type":"code","source":["!python -m spacy download en_core_web_md\n"],"metadata":{"id":"L4jd5EWVayG9"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def compare_objects(obj_a, obj_b):\n","    if isinstance(obj_a, dict) and isinstance(obj_b, dict):\n","        print(\"dict\",obj_a,obj_b)\n","        if len(obj_a) != len(obj_b):\n","            return False\n","\n","        for key, value_a in obj_a.items():\n","            if key not in obj_b or not compare_objects(value_a, obj_b[key]):\n","                return False\n","        return True\n","\n","    elif isinstance(obj_a, list) and isinstance(obj_b, list):\n","        print(\"list\",obj_a,obj_b)\n","        if len(obj_a) != len(obj_b):\n","            return False\n","        if len(obj_a) == 0:\n","            return True\n","        if isinstance(obj_a[0], dict):\n","            obj_a = sorted(obj_a, key=lambda x: x['argument_name'])\n","            obj_b = sorted(obj_b, key=lambda x: x['argument_name'])\n","        else:\n","            obj_a = sorted(obj_a)\n","            obj_b = sorted(obj_b)\n","        for a, b in zip(obj_a, obj_b):\n","            if not compare_objects(a, b):\n","                return False\n","        return True\n","\n","    else:\n","        return obj_a == obj_b\n"],"metadata":{"id":"ZN_QfkpzPo5m"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def processing_list(list):\n","  prev_outputs = [None] * len(list)\n","  for i, tool in enumerate(list):\n","    if(tool['arguments']):\n","      for arg in tool['arguments']:\n","          if (arg['argument_value']) and '$$PREV[' in arg['argument_value']:\n","              prev_idx = int(arg['argument_value'].split('$$PREV[')[1][0])\n","              arg['argument_value'] = prev_outputs[prev_idx]\n","    prev_outputs[i] = tool['tool_name']\n","  return list"],"metadata":{"id":"EImjPGiTE_ha"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["list1 = [{'tool_name': 'works_list', 'arguments': [{'argument_name': 'issue.priority', 'argument_value': ['p2']}]}, {'tool_name': 'add_work_items_to_sprint', 'arguments': [{'argument_name': 'work_ids', 'argument_value': '$$PREV[0]'}, {'argument_name': 'sprint_id', 'argument_value': '$$PREV[1]'}]}, {'tool_name': 'get_sprint_id', 'arguments': []}]\n","list2 = [{'tool_name': 'get_sprint_id', 'arguments': []},{'tool_name': 'create_actionable_tasks_from_text', 'arguments': [{'argument_name': 'text', 'argument_value': 'MeetingTranscript'}]},{'tool_name': 'add_work_items_to_sprint', 'arguments': [{'argument_name': 'work_ids', 'argument_value': '$$PREV[1]'}, {'argument_name': 'sprint_id', 'argument_value': '$$PREV[0]'}]}]\n","\n","def compare_lists_of_tools(list1, list2):\n","    list1 = processing_list(list1)\n","    list2 = processing_list(list2)\n","    map1 = {}\n","    map2 = {}\n","    for item in list1:\n","      map1[item['tool_name']] = item['arguments']\n","    for item in list2:\n","      map2[item['tool_name']] = item['arguments']\n","    print(map1)\n","    print(map2)\n","    return compare_objects(map1,map2)\n","\n","lists_equal = compare_lists_of_tools(list1, list2)\n","print(\"Are the lists equal?\", lists_equal)\n"],"metadata":{"id":"_CQyd9eQ6HPS"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def objective_similarity(list1,list2):\n","  return compare_lists_of_tools(list1,list2)"],"metadata":{"id":"6ki0-ASdNXIg"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from sentence_transformers import SentenceTransformer, util\n","import json\n","\n","def compute_tool_similarity(tool1, tool2, model_name='bert-base-uncased'):\n","    # Load the BERT model\n","    model = SentenceTransformer(model_name)\n","\n","    # Encode the tool names using BERT\n","    embedding1 = model.encode(tool1['tool_name'], convert_to_tensor=True)\n","    embedding2 = model.encode(tool2['tool_name'], convert_to_tensor=True)\n","\n","    # Compute cosine similarity between the tool names\n","    similarity_score = util.pytorch_cos_sim(embedding1, embedding2)\n","\n","    return similarity_score.item()\n","\n","def compute_list_similarity(list1, list2):\n","    # Initialize a list to store similarity scores between tools\n","    tool_similarity_scores = []\n","\n","    # Compute similarity between each pair of tools\n","    for tool1 in list1:\n","        for tool2 in list2:\n","            tool_similarity_scores.append(compute_tool_similarity(tool1, tool2))\n","\n","    # Calculate the average similarity score\n","    average_similarity = sum(tool_similarity_scores) / len(tool_similarity_scores)\n","\n","    return average_similarity"],"metadata":{"id":"P234cePRGb72","colab":{"base_uri":"https://localhost:8080/","height":385},"executionInfo":{"status":"error","timestamp":1700906747294,"user_tz":-330,"elapsed":55,"user":{"displayName":"GAUTAM SETHIA","userId":"10968948203273828665"}},"outputId":"f3904ab8-3a42-42d4-aaa6-aca3b28dfb25"},"execution_count":null,"outputs":[{"output_type":"error","ename":"ModuleNotFoundError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)","\u001b[0;32m<ipython-input-1-d57d09e6eafc>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0msentence_transformers\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mSentenceTransformer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mutil\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mjson\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mcompute_tool_similarity\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtool1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtool2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmodel_name\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'multi-qa-MiniLM-L6-cos-v1'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m     \u001b[0;31m# Load the BERT model\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'sentence_transformers'","","\u001b[0;31m---------------------------------------------------------------------------\u001b[0;32m\nNOTE: If your import is failing due to a missing package, you can\nmanually install dependencies using either !pip or !apt.\n\nTo view examples of installing some common dependencies, click the\n\"Open Examples\" button below.\n\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n"],"errorDetails":{"actions":[{"action":"open_url","actionText":"Open Examples","url":"/notebooks/snippets/importing_libraries.ipynb"}]}}]},{"cell_type":"code","source":["def subjective_similarity(obj1, obj2):\n","    obj1 = processing_list(obj1)\n","    obj2 = processing_list(obj2)\n","    similarity_score = compute_list_similarity(obj1, obj2)\n","    return similarity_score\n","\n","# Example JSON strings\n","list1 = [{'tool_name': 'get_sprint_id', 'arguments': []}, {'tool_name': 'create_actionable_tasks_from_text', 'arguments': [{'argument_name': 'text', 'argument_value': 'MeetingTranscript'}]}, {'tool_name': 'add_work_items_to_sprint', 'arguments': [{'argument_name': 'work_ids', 'argument_value': '$$PREV[1]'}, {'argument_name': 'sprint_id', 'argument_value': '$$PREV[0]'}]}]\n","list2 = [{'tool_name': 'works_list', 'arguments': [{'argument_name': 'issue_priority', 'argument_value': '[\"p2\"]'}]}, {'tool_name': 'add_work_items_to_sprint', 'arguments': [{'argument_name': 'work_ids', 'argument_value': '$$PREV[0]'}, {'argument_name': 'sprint_id', 'argument_value': '$$PREV[1]'}]}, {'tool_name': 'another_tool', 'arguments': []}]\n","\n","# Calculate similarity\n","similarity = subjective_similarity(list1, list2)\n","print(f\"Similarity between the lists: {similarity}\")\n"],"metadata":{"id":"uiVCHQ8PQRSW"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import math\n","def objective_similarity(obj1, obj2):\n","\n","    similarity_score = compare_list_of_maps_objective(obj1, obj2)\n","    return math.floor(similarity_score)\n","\n","# Example JSON strings\n","json_string1 = '{\"key1\": \"value1\", \"key2\": \"value2\", \"key3\": {\"nested_key\": \"nested_value\"}}'\n","json_string2 = '{\"key1\": \"value1\", \"key2\": \"value2\", \"key3\": {\"nested_key\": \"\"}}'\n","\n","# Calculate similarity\n","similarity = objective_similarity(json_string1, json_string2)\n","print(f\"Similarity between the JSON objects: {similarity}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"57Bd3xA-QXpl","executionInfo":{"status":"ok","timestamp":1700863042243,"user_tz":-330,"elapsed":721,"user":{"displayName":"SUBHAM SUBHASIS SAHOO","userId":"02034773433745160035"}},"outputId":"4bf22483-2aaf-477c-8c27-796fc1473dd5"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Similarity between the JSON objects: 0\n"]}]},{"cell_type":"markdown","source":["# Define Inference Function\n","\n","> Indented block\n","\n"],"metadata":{"id":"0YYsj2dXRMaE"}},{"cell_type":"code","source":["def inference_function(query, alpha, beta):\n","    obj = Inference(template,all_tools)\n","    response = obj.invoke_agent(query)\n","    print(response)\n","    return response\n"],"metadata":{"id":"CtC7DZpKRL7F"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Experiment Setup\n"],"metadata":{"id":"9l_ojgQxRg1w"}},{"cell_type":"code","source":["ExperimentPipeline:\n","    def __init__(self, inference_func, inference_args, result_map, similarity_func, EXP_DIR, df):\n","        self.inference_func = inference_func\n","        self.similarity_func = similarity_func\n","        self.result_map = result_map\n","        self.results = []\n","        self.arg_names = list(inference_args.keys())\n","        self.arg_values = [inference_args[name] for name in self.arg_names]\n","        self.size = len(result_map)\n","        self.exp_number = self.get_next_experiment_number()\n","        self.exp_dir = os.path.join(EXP_DIR , f\"experiment_{self.exp_number}\")\n","        self.master_excel_file = '/content/drive/MyDrive/Tech.High.Devrev/Results/Master_Results.xlsx'\n","        self.output_df = df\n","\n","\n","    def run_experiment(self,save_results=True):\n","\n","        if not os.path.exists(self.exp_dir):\n","              os.makedirs(self.exp_dir)\n","\n","        arg_permutations = itertools.product(*self.arg_values)\n","\n","        for values in arg_permutations:\n","            args_dict = {name: value for name, value in zip(self.arg_names, values)}\n","\n","            total_inference_time = 0\n","            total_similarity = 0\n","\n","            outputs=[]\n","            similarities = []\n","            for query in self.result_map.keys():\n","                start_time = time.time()\n","                output = self.inference_func(query, **args_dict)\n","                outputs.append(output)\n","\n","                similarity = self.similarity_func(self.result_map[query], output)\n","                similarities.append(similarity)\n","\n","                end_time = time.time()\n","                inference_time = end_time - start_time\n","\n","                total_inference_time += inference_time\n","                total_similarity += similarity\n","\n","            self.save_outputs(outputs,similarities)\n","\n","            self.results.append({**args_dict, 'Similarity': total_similarity, 'Inference_Time': total_inference_time})\n","\n","        if save_results:\n","            self.save_results()\n","\n","    def save_results(self):\n","        self.create_dataframe()\n","        self.plot_metrics()\n","        self.add_to_master_excel()\n","\n","    def create_dataframe(self):\n","        file_name = os.path.join(self.exp_dir, \"experiment_results.csv\")\n","        self.df = pd.DataFrame(self.results)\n","        self.df.to_csv(file_name, index=True)\n","\n","    def save_outputs(self,outputs,similarities):\n","        self.output_df['Output'] = outputs\n","        self.output_df['Similarity Score'] = similarities\n","        file_name = os.path.join(self.exp_dir, \"experiment_outputs.csv\")\n","        self.output_df.to_csv(file_name, index=True)\n","        self.output_df.drop(columns='Output',inplace=True)\n","\n","    def plot_metrics(self):\n","        plt.figure(figsize=(10, 6))\n","\n","        # Bar plot for Similarity\n","        plt.subplot(1, 2, 1)\n","        plt.bar(self.df.index, self.df['Similarity'], color='skyblue')\n","        plt.xlabel('Index')\n","        plt.ylabel('Similarity')\n","        plt.title('Similarity vs. Index')\n","\n","        # Bar plot for Inference_Time\n","        plt.subplot(1, 2, 2)\n","        plt.bar(self.df.index, self.df['Inference_Time'], color='salmon')\n","        plt.xlabel('Index')\n","        plt.ylabel('Inference Time')\n","        plt.title('Inference Time vs. Index')\n","\n","        plt.tight_layout()\n","\n","        # Save plots\n","        if not os.path.exists(self.exp_dir):\n","            os.makedirs(self.exp_dir)\n","\n","        plot_similarity_name = os.path.join(self.exp_dir, f\"exp_{self.exp_number}_metrics_plot.png\")\n","        plt.savefig(plot_similarity_name)\n","        plt.show()\n","\n","    def get_next_experiment_number(self):\n","        exp_num = 1\n","        while os.path.exists(os.path.join(EXP_DIR ,f\"experiment_{exp_num}\")):\n","            exp_num += 1\n","        return exp_num\n","\n","    def add_to_master_excel(self):\n","\n","      if not os.path.exists(self.master_excel_file):\n","          with pd.ExcelWriter(self.master_excel_file, engine='openpyxl') as writer:\n","              empty_df = pd.DataFrame(columns=['Placeholder'])\n","              empty_df.to_excel(writer, sheet_name='Placeholder', index=False)\n","\n","      with pd.ExcelWriter(self.master_excel_file, mode='a', engine='openpyxl') as writer:\n","          sheet_name = f\"Experiment_{self.exp_number}\"\n","          self.df.to_excel(writer, sheet_name=sheet_name, index=False)"],"metadata":{"id":"JKs3f1vuS_Mz"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"ev7ScQUrMAYR","executionInfo":{"status":"ok","timestamp":1700860530895,"user_tz":-330,"elapsed":59,"user":{"displayName":"SUBHAM SUBHASIS SAHOO","userId":"02034773433745160035"}},"outputId":"18ba390f-7a10-490e-bb57-30b26771848e"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                               Query  \\\n","0  Given a team meeting transcript \"MeetingTransc...   \n","1  Get the current sprint ID, find work items tha...   \n","2  Get all work items with the priority \"p2,\" add...   \n","3  Retrieve work items related to the project \"En...   \n","4  Retrieve work items in the \"In Progress\" stage...   \n","\n","                                              Output  \\\n","0  [\\n  {\\n    \"tool_name\": \"create_actionable_ta...   \n","1  [\\r\\n  {\\r\\n    \"tool_name\": \"get_sprint_id\",\\...   \n","2  [\\n  {\\n    \"tool_name\": \"works_list\",\\n    \"a...   \n","3  [\\r\\n  {\\r\\n    \"tool_name\": \"search_object_by...   \n","4  [\\n  {\\n    \"tool_name\": \"works_list\",\\n    \"a...   \n","\n","                                          Output_map  \n","0  [{'tool_name': 'create_actionable_tasks_from_t...  \n","1  [{'tool_name': 'get_sprint_id', 'arguments': [...  \n","2  [{'tool_name': 'works_list', 'arguments': [{'a...  \n","3  [{'tool_name': 'search_object_by_name', 'argum...  \n","4  [{'tool_name': 'works_list', 'arguments': [{'a...  "],"text/html":["\n","  <div id=\"df-2f51e190-fb65-47c0-8e2b-e0203df4d073\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Query</th>\n","      <th>Output</th>\n","      <th>Output_map</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Given a team meeting transcript \"MeetingTransc...</td>\n","      <td>[\\n  {\\n    \"tool_name\": \"create_actionable_ta...</td>\n","      <td>[{'tool_name': 'create_actionable_tasks_from_t...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Get the current sprint ID, find work items tha...</td>\n","      <td>[\\r\\n  {\\r\\n    \"tool_name\": \"get_sprint_id\",\\...</td>\n","      <td>[{'tool_name': 'get_sprint_id', 'arguments': [...</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Get all work items with the priority \"p2,\" add...</td>\n","      <td>[\\n  {\\n    \"tool_name\": \"works_list\",\\n    \"a...</td>\n","      <td>[{'tool_name': 'works_list', 'arguments': [{'a...</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Retrieve work items related to the project \"En...</td>\n","      <td>[\\r\\n  {\\r\\n    \"tool_name\": \"search_object_by...</td>\n","      <td>[{'tool_name': 'search_object_by_name', 'argum...</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Retrieve work items in the \"In Progress\" stage...</td>\n","      <td>[\\n  {\\n    \"tool_name\": \"works_list\",\\n    \"a...</td>\n","      <td>[{'tool_name': 'works_list', 'arguments': [{'a...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2f51e190-fb65-47c0-8e2b-e0203df4d073')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-2f51e190-fb65-47c0-8e2b-e0203df4d073 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-2f51e190-fb65-47c0-8e2b-e0203df4d073');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-cc735d23-299b-4aa8-b286-c19d76e288ad\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-cc735d23-299b-4aa8-b286-c19d76e288ad')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-cc735d23-299b-4aa8-b286-c19d76e288ad button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":40}]},{"cell_type":"code","source":["EXP_DIR = '/content/drive/MyDrive/Tech.High.Devrev/Results'\n","\n","inference_args = {\n","    \"alpha\": [0.1],\n","    \"beta\": [\"gpt-3.5\"]\n","  }\n","\n","experiment = ExperimentPipeline(inference_function, inference_args, result_map, subjective_similarity, EXP_DIR, df)\n","experiment.run_experiment(save_results=True)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"54rrJDTPVBrs","executionInfo":{"status":"ok","timestamp":1700864292734,"user_tz":-330,"elapsed":33344,"user":{"displayName":"SUBHAM SUBHASIS SAHOO","userId":"02034773433745160035"}},"outputId":"752ca5de-6514-46cd-831e-c695b65b6fe5"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Creating Tools\n","def works_list(applies_to_part=None, created_by=None, issue_priority=None, issue_rev_orgs=None, limit=None, owned_by=None, stage_name=None):\n","    \"\"\"Returns a list of work items matching the request\"\"\"\n","    return \"No error. Proceed to next step.\"\n","def summarize_objects(objects=None):\n","    \"\"\"Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail.\"\"\"\n","    return \"No error. Proceed to next step.\"\n","def prioritize_objects(objects=None):\n","    \"\"\"Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail.\"\"\"\n","    return \"No error. Proceed to next step.\"\n","def add_work_items_to_sprint(work_ids=None, sprint_id=None):\n","    \"\"\"Adds the given work items to the sprint\"\"\"\n","    return \"No error. Proceed to next step.\"\n","def get_sprint_id(dummy=None):\n","    \"\"\"Returns the ID of the current sprint\"\"\"\n","    return \"No error. Proceed to next step.\"\n","def get_similar_work_items(work_id=None):\n","    \"\"\"Returns a list of work items that are similar to the given work item\"\"\"\n","    return \"No error. Proceed to next step.\"\n","def search_object_by_name(query=None):\n","    \"\"\"Given a search string, returns the id of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest.\"\"\"\n","    return \"No error. Proceed to next step.\"\n","def create_actionable_tasks_from_text(text=None):\n","    \"\"\"Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item.\"\"\"\n","    return \"No error. Proceed to next step.\"\n","def who_am_i(dummy=None):\n","    \"\"\"Returns the ID of the current user\"\"\"\n","    return \"No error. Proceed to next step.\"\n","Tools created\n","Agent Invoked\n","\n","\n","\u001b[1m> Entering new AgentExecutor chain...\u001b[0m\n","\u001b[32;1m\u001b[1;3mThought: Let's first get the current sprint ID.\n","Action: get_sprint_id\n","Action Input: \u001b[0m\n","\n","Observation:\u001b[33;1m\u001b[1;3mNo error. Proceed to next step.\u001b[0m\n","\u001b[32;1m\u001b[1;3m Now that we have the sprint ID, let's extract actionable insights from the meeting transcript.\n","Action: create_actionable_tasks_from_text\n","Action Input: (text: \"MeetingTranscript\")\u001b[0m\n","\n","Observation:\u001b[33;1m\u001b[1;3mNo error. Proceed to next step.\u001b[0m\n","\u001b[32;1m\u001b[1;3m Now that we have the actionable insights, let's add them to the current sprint.\n","Action: add_work_items_to_sprint\n","Action Input: (work_ids: \"$$PREV[1]\", sprint_id: \"$$PREV[0]\") (Referring to the list of actionable insights and the current sprint ID)\u001b[0m\n","\n","Observation:\u001b[36;1m\u001b[1;3mNo error. Proceed to next step.\u001b[0m\n","\u001b[32;1m\u001b[1;3m I now know the final answer.\n","Final Answer:\n","\"tool name\": \"get_sprint_id\"\n","\"tool name\": \"create_actionable_tasks_from_text\"\n","\"argument_name\": \"text\"\n","\"argument_value\": \"MeetingTranscript\"\n","\"tool name\": \"add_work_items_to_sprint\"\n","\"argument_name\": \"work_ids\"\n","\"argument_value\": \"$$PREV[1]\"\n","\"argument_name\": \"sprint_id\"\n","\"argument_value\": \"$$PREV[0]\"\u001b[0m\n","\n","\u001b[1m> Finished chain.\u001b[0m\n","[{'tool_name': 'get_sprint_id', 'arguments': []}, {'tool_name': 'create_actionable_tasks_from_text', 'arguments': [{'argument_name': 'text', 'argument_value': 'MeetingTranscript'}]}, {'tool_name': 'add_work_items_to_sprint', 'arguments': [{'argument_name': 'work_ids', 'argument_value': '$$PREV[1]'}, {'argument_name': 'sprint_id', 'argument_value': '$$PREV[0]'}]}]\n","Creating Tools\n","def works_list(applies_to_part=None, created_by=None, issue_priority=None, issue_rev_orgs=None, limit=None, owned_by=None, stage_name=None):\n","    \"\"\"Returns a list of work items matching the request\"\"\"\n","    return \"No error. Proceed to next step.\"\n","def summarize_objects(objects=None):\n","    \"\"\"Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail.\"\"\"\n","    return \"No error. Proceed to next step.\"\n","def prioritize_objects(objects=None):\n","    \"\"\"Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail.\"\"\"\n","    return \"No error. Proceed to next step.\"\n","def add_work_items_to_sprint(work_ids=None, sprint_id=None):\n","    \"\"\"Adds the given work items to the sprint\"\"\"\n","    return \"No error. Proceed to next step.\"\n","def get_sprint_id(dummy=None):\n","    \"\"\"Returns the ID of the current sprint\"\"\"\n","    return \"No error. Proceed to next step.\"\n","def get_similar_work_items(work_id=None):\n","    \"\"\"Returns a list of work items that are similar to the given work item\"\"\"\n","    return \"No error. Proceed to next step.\"\n","def search_object_by_name(query=None):\n","    \"\"\"Given a search string, returns the id of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest.\"\"\"\n","    return \"No error. Proceed to next step.\"\n","def create_actionable_tasks_from_text(text=None):\n","    \"\"\"Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item.\"\"\"\n","    return \"No error. Proceed to next step.\"\n","def who_am_i(dummy=None):\n","    \"\"\"Returns the ID of the current user\"\"\"\n","    return \"No error. Proceed to next step.\"\n","Tools created\n","Agent Invoked\n","\n","\n","\u001b[1m> Entering new AgentExecutor chain...\u001b[0m\n","\u001b[32;1m\u001b[1;3mThought: Let's first get the current sprint ID.\n","Action: get_sprint_id\n","Action Input: \u001b[0m\n","\n","Observation:\u001b[33;1m\u001b[1;3mNo error. Proceed to next step.\u001b[0m\n","\u001b[32;1m\u001b[1;3m Now that we have the sprint ID, let's find work items that are similar to \"don:core:dvrv-us-1:devo/0:issue/2\".\n","Action: get_similar_work_items\n","Action Input: (work_id: \"don:core:dvrv-us-1:devo/0:issue/2\")\u001b[0m\n","\n","Observation:\u001b[38;5;200m\u001b[1;3mNo error. Proceed to next step.\u001b[0m\n","\u001b[32;1m\u001b[1;3m Now that we have the list of similar work items, let's prioritize them based on internal criteria.\n","Action: prioritize_objects\n","Action Input: (objects: \"$$PREV[1]\") (Referring to the list of similar work items)\u001b[0m\n","\n","Observation:\u001b[38;5;200m\u001b[1;3mNo error. Proceed to next step.\u001b[0m\n","\u001b[32;1m\u001b[1;3m I now know the final answer.\n","Final Answer:\n","\"tool name\": \"get_sprint_id\"\n","\"tool name\": \"get_similar_work_items\"\n","\"argument_name\": \"work_id\"\n","\"argument_value\": \"don:core:dvrv-us-1:devo/0:issue/2\"\n","\"tool name\": \"prioritize_objects\"\n","\"argument_name\": \"objects\"\n","\"argument_value\": \"$$PREV[1]\"\u001b[0m\n","\n","\u001b[1m> Finished chain.\u001b[0m\n","[{'tool_name': 'get_sprint_id', 'arguments': []}, {'tool_name': 'get_similar_work_items', 'arguments': [{'argument_name': 'work_id', 'argument_value': 'don'}]}, {'tool_name': 'prioritize_objects', 'arguments': [{'argument_name': 'objects', 'argument_value': '$$PREV[1]'}]}]\n","Creating Tools\n","def works_list(applies_to_part=None, created_by=None, issue_priority=None, issue_rev_orgs=None, limit=None, owned_by=None, stage_name=None):\n","    \"\"\"Returns a list of work items matching the request\"\"\"\n","    return \"No error. Proceed to next step.\"\n","def summarize_objects(objects=None):\n","    \"\"\"Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail.\"\"\"\n","    return \"No error. Proceed to next step.\"\n","def prioritize_objects(objects=None):\n","    \"\"\"Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail.\"\"\"\n","    return \"No error. Proceed to next step.\"\n","def add_work_items_to_sprint(work_ids=None, sprint_id=None):\n","    \"\"\"Adds the given work items to the sprint\"\"\"\n","    return \"No error. Proceed to next step.\"\n","def get_sprint_id(dummy=None):\n","    \"\"\"Returns the ID of the current sprint\"\"\"\n","    return \"No error. Proceed to next step.\"\n","def get_similar_work_items(work_id=None):\n","    \"\"\"Returns a list of work items that are similar to the given work item\"\"\"\n","    return \"No error. Proceed to next step.\"\n","def search_object_by_name(query=None):\n","    \"\"\"Given a search string, returns the id of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest.\"\"\"\n","    return \"No error. Proceed to next step.\"\n","def create_actionable_tasks_from_text(text=None):\n","    \"\"\"Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item.\"\"\"\n","    return \"No error. Proceed to next step.\"\n","def who_am_i(dummy=None):\n","    \"\"\"Returns the ID of the current user\"\"\"\n","    return \"No error. Proceed to next step.\"\n","Tools created\n","Agent Invoked\n","\n","\n","\u001b[1m> Entering new AgentExecutor chain...\u001b[0m\n","\u001b[32;1m\u001b[1;3mThought: Let's first get all work items with the priority \"p2\".\n","Action: works_list\n","Action Input: (issue_priority: [\"p2\"])\u001b[0m\n","\n","Observation:\u001b[36;1m\u001b[1;3mNo error. Proceed to next step.\u001b[0m\n","\u001b[32;1m\u001b[1;3m Now that we have the list of work items, let's add them to the current sprint.\n","Action: add_work_items_to_sprint\n","Action Input: (work_ids: \"$$PREV[0]\") (Referring to the list of work items with priority \"p2\"), (sprint_id: \"$$PREV[1]\") (Referring to the ID of the current sprint)\u001b[0m\n","\n","Observation:\u001b[36;1m\u001b[1;3mNo error. Proceed to next step.\u001b[0m\n","\u001b[32;1m\u001b[1;3m Now that we have added the work items to the current sprint, let's get the ID of the current sprint.\n","Action: get_sprint_id\n","Action Input: \u001b[0m\n","\n","Observation:\u001b[33;1m\u001b[1;3mNo error. Proceed to next step.\u001b[0m\n","\u001b[32;1m\u001b[1;3m I now know the final answer.\n","Final Answer:\n","\"tool name\": \"works_list\"\n","\"argument_name\": \"issue_priority\"\n","\"argument_value\": [\"p2\"]\n","\"tool name\": \"add_work_items_to_sprint\"\n","\"argument_name\": \"work_ids\"\n","\"argument_value\": \"$$PREV[0]\"\n","\"argument_name\": \"sprint_id\"\n","\"argument_value\": \"$$PREV[1]\"\n","\"tool name\": \"get_sprint_id\"\u001b[0m\n","\n","\u001b[1m> Finished chain.\u001b[0m\n","[{'tool_name': 'works_list', 'arguments': [{'argument_name': 'issue_priority', 'argument_value': '[\"p2\"]'}]}, {'tool_name': 'add_work_items_to_sprint', 'arguments': [{'argument_name': 'work_ids', 'argument_value': '$$PREV[0]'}, {'argument_name': 'sprint_id', 'argument_value': '$$PREV[1]'}]}, {'tool_name': 'get_sprint_id', 'arguments': []}]\n","Creating Tools\n","def works_list(applies_to_part=None, created_by=None, issue_priority=None, issue_rev_orgs=None, limit=None, owned_by=None, stage_name=None):\n","    \"\"\"Returns a list of work items matching the request\"\"\"\n","    return \"No error. Proceed to next step.\"\n","def summarize_objects(objects=None):\n","    \"\"\"Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail.\"\"\"\n","    return \"No error. Proceed to next step.\"\n","def prioritize_objects(objects=None):\n","    \"\"\"Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail.\"\"\"\n","    return \"No error. Proceed to next step.\"\n","def add_work_items_to_sprint(work_ids=None, sprint_id=None):\n","    \"\"\"Adds the given work items to the sprint\"\"\"\n","    return \"No error. Proceed to next step.\"\n","def get_sprint_id(dummy=None):\n","    \"\"\"Returns the ID of the current sprint\"\"\"\n","    return \"No error. Proceed to next step.\"\n","def get_similar_work_items(work_id=None):\n","    \"\"\"Returns a list of work items that are similar to the given work item\"\"\"\n","    return \"No error. Proceed to next step.\"\n","def search_object_by_name(query=None):\n","    \"\"\"Given a search string, returns the id of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest.\"\"\"\n","    return \"No error. Proceed to next step.\"\n","def create_actionable_tasks_from_text(text=None):\n","    \"\"\"Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item.\"\"\"\n","    return \"No error. Proceed to next step.\"\n","def who_am_i(dummy=None):\n","    \"\"\"Returns the ID of the current user\"\"\"\n","    return \"No error. Proceed to next step.\"\n","Tools created\n","Agent Invoked\n","\n","\n","\u001b[1m> Entering new AgentExecutor chain...\u001b[0m\n","\u001b[32;1m\u001b[1;3mThought: Let's first find the project \"EnterprisePlatform\".\n","Action: search_object_by_name\n","Action Input: (query: \"EnterprisePlatform\")\u001b[0m\n","\n","Observation:\u001b[36;1m\u001b[1;3mNo error. Proceed to next step.\u001b[0m\n","\u001b[32;1m\u001b[1;3m Now that we've located the project, we need to fetch the work items related to it.\n","Action: works_list\n","Action Input:\n","(applies_to_part: [\"$$PREV[0]\"] (Referring to the previously retrieved project ID))\u001b[0m\n","\n","Observation:\u001b[36;1m\u001b[1;3mNo error. Proceed to next step.\u001b[0m\n","\u001b[32;1m\u001b[1;3m To get a better understanding of these work items, let's summarize 'em.\n","Action: summarize_objects\n","Action Input: (objects: \"$$PREV[1]\") (Referring to the list of work items)\u001b[0m\n","\n","Observation:\u001b[33;1m\u001b[1;3mNo error. Proceed to next step.\u001b[0m\n","\u001b[32;1m\u001b[1;3m Let's prioritize the work items.\n","Action: prioritize_objects\n","Action Input: (objects: \"$$PREV[2]\") (Referring to the list of summarized work items)\u001b[0m\n","\n","Observation:\u001b[38;5;200m\u001b[1;3mNo error. Proceed to next step.\u001b[0m\n","\u001b[32;1m\u001b[1;3m I now know the final answer.\n","Final Answer:\n","\"tool name\": \"search_object_by_name\"\n","\"argument_name\": \"query\"\n","\"argument_value\": \"EnterprisePlatform\"\n","\"tool name\": \"works_list\"\n","\"argument_name\": \"applies_to_part\"\n","\"argument_value\": [\"$$PREV[0]\"]\n","\"tool name\": \"summarize_objects\"\n","\"argument_name\": \"objects\"\n","\"argument_value\": \"$$PREV[1]\"\n","\"tool name\": \"prioritize_objects\"\n","\"argument_name\": \"objects\"\n","\"argument_value\": \"$$PREV[2]\"\u001b[0m\n","\n","\u001b[1m> Finished chain.\u001b[0m\n","[{'tool_name': 'search_object_by_name', 'arguments': [{'argument_name': 'query', 'argument_value': 'EnterprisePlatform'}]}, {'tool_name': 'works_list', 'arguments': [{'argument_name': 'applies_to_part', 'argument_value': '[\"$$PREV[0]\"]'}]}, {'tool_name': 'summarize_objects', 'arguments': [{'argument_name': 'objects', 'argument_value': '$$PREV[1]'}]}, {'tool_name': 'prioritize_objects', 'arguments': [{'argument_name': 'objects', 'argument_value': '$$PREV[2]'}]}]\n","Creating Tools\n","def works_list(applies_to_part=None, created_by=None, issue_priority=None, issue_rev_orgs=None, limit=None, owned_by=None, stage_name=None):\n","    \"\"\"Returns a list of work items matching the request\"\"\"\n","    return \"No error. Proceed to next step.\"\n","def summarize_objects(objects=None):\n","    \"\"\"Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail.\"\"\"\n","    return \"No error. Proceed to next step.\"\n","def prioritize_objects(objects=None):\n","    \"\"\"Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail.\"\"\"\n","    return \"No error. Proceed to next step.\"\n","def add_work_items_to_sprint(work_ids=None, sprint_id=None):\n","    \"\"\"Adds the given work items to the sprint\"\"\"\n","    return \"No error. Proceed to next step.\"\n","def get_sprint_id(dummy=None):\n","    \"\"\"Returns the ID of the current sprint\"\"\"\n","    return \"No error. Proceed to next step.\"\n","def get_similar_work_items(work_id=None):\n","    \"\"\"Returns a list of work items that are similar to the given work item\"\"\"\n","    return \"No error. Proceed to next step.\"\n","def search_object_by_name(query=None):\n","    \"\"\"Given a search string, returns the id of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest.\"\"\"\n","    return \"No error. Proceed to next step.\"\n","def create_actionable_tasks_from_text(text=None):\n","    \"\"\"Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item.\"\"\"\n","    return \"No error. Proceed to next step.\"\n","def who_am_i(dummy=None):\n","    \"\"\"Returns the ID of the current user\"\"\"\n","    return \"No error. Proceed to next step.\"\n","Tools created\n","Agent Invoked\n","\n","\n","\u001b[1m> Entering new AgentExecutor chain...\u001b[0m\n","\u001b[32;1m\u001b[1;3mThought: Let's first retrieve the work items in the \"In Progress\" stage owned by \"USER-456\" and \"USER-789\".\n","Action: works_list\n","Action Input: (owned_by: [\"USER-456\", \"USER-789\"], stage_name: [\"In Progress\"])\u001b[0m\n","\n","Observation:\u001b[36;1m\u001b[1;3mNo error. Proceed to next step.\u001b[0m\n","\u001b[32;1m\u001b[1;3m Now that we've retrieved the work items, let's summarize them.\n","Action: summarize_objects\n","Action Input: (objects: \"$$PREV[0]\") (Referring to the list of work items)\u001b[0m\n","\n","Observation:\u001b[33;1m\u001b[1;3mNo error. Proceed to next step.\u001b[0m\n","\u001b[32;1m\u001b[1;3m Now that we've summarized the work items, let's prioritize them by severity.\n","Action: prioritize_objects\n","Action Input: (objects: \"$$PREV[1]\") (Referring to the list of summarized work items)\u001b[0m\n","\n","Observation:\u001b[38;5;200m\u001b[1;3mNo error. Proceed to next step.\u001b[0m\n","\u001b[32;1m\u001b[1;3m I now know the final answer.\n","Final Answer:\n","\"tool name\": \"works_list\"\n","\"argument_name\": \"owned_by\"\n","\"argument_value\": [\"USER-456\", \"USER-789\"]\n","\"argument_name\": \"stage_name\"\n","\"argument_value\": [\"In Progress\"]\n","\"tool name\": \"summarize_objects\"\n","\"argument_name\": \"objects\"\n","\"argument_value\": \"$$PREV[0]\"\n","\"tool name\": \"prioritize_objects\"\n","\"argument_name\": \"objects\"\n","\"argument_value\": \"$$PREV[1]\"\u001b[0m\n","\n","\u001b[1m> Finished chain.\u001b[0m\n","[{'tool_name': 'works_list', 'arguments': [{'argument_name': 'owned_by', 'argument_value': '[\"USER-456\", \"USER-789\"]'}, {'argument_name': 'stage_name', 'argument_value': '[\"In Progress\"]'}]}, {'tool_name': 'summarize_objects', 'arguments': [{'argument_name': 'objects', 'argument_value': '$$PREV[0]'}]}, {'tool_name': 'prioritize_objects', 'arguments': [{'argument_name': 'objects', 'argument_value': '$$PREV[1]'}]}]\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["response"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"v57ugGrmN67Q","executionInfo":{"status":"ok","timestamp":1700861082388,"user_tz":-330,"elapsed":18,"user":{"displayName":"SUBHAM SUBHASIS SAHOO","userId":"02034773433745160035"}},"outputId":"b251e6c8-d6c4-4276-8e22-e6c9770a12a7"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[{'tool_name': 'prioritize_objects',\n","  'arguments': [{'argument_name': 'objects',\n","    'argument_value': 'my work items'}]}]"]},"metadata":{},"execution_count":50}]}]}