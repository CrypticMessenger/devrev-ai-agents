{"argument_processing_prompt": "\nI have a argument for an function call. I want to summarize it and get its data type and possible values.\nFor Example:\n\nInput:{\"name\": \"ticket.severity\",\"description\": \"Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium\",\"type\": \"array of strings\"}\nOuput: {\"desc\": \"Filters for tickets with any of the provided severities\", \"type\": \"Array[String]\", \"allowed\": [\"blocker\", \"high\", \"low\", \"medium\"]}\n\nInput:{\"name\": \"query\",\"description\": \"The search string, could be for example customer's name, part name, user name.\",\"type\": \"string\"}\nOutput: {\"desc\": \"The search string, could be for example customer's name, part name, user name.\", \"type\": \"String\"}\n\nInput: {\"name\": \"limit\",\"description\": \"The maximum number of works to return. The default is '50'\",\"type\": \"integer (int32)\"}\nOutput: {\"desc\": \"The maximum number of works to return.\", \"type\": \"int32\"}\n\nInput: {\"name\": \"applies_to_part\", \"description\": \"Filters for work belonging to any of the provided parts\", \"type\": \"array of strings\", \"example\": [ \"FEAT-123\", \"ENH-123\", \"PROD-123\", \"CAPL-123\" ]}\nOutput: {\"desc\": \"Filters for work belonging to any of the provided parts.\", \"type\": \"Array[String]\", \"example\": [\"FEAT-123\", \"ENH-123\", \"PROD-123\", \"CAPL-123\"]}\n\nsolve for the following argument ensuring output is valid json:\nInput: %s\nOutput:\n", "segmentation_prompt": "\nYou have sentence which contains a task statement. You need to perform coreference resolution and split it into multiple sentences containing simpler atomic subtasks without fabricating any information. E.g.:\nInput: Retrieve all tasks resembling TKT-123, condense the information, generate problem reports based on the summary, and arrange them in order of priority\nOutput: [\"Get tasks resembling TKT-123\",\"Summarize the tasks resembling TKT-123\",\"Generate reports from summarized tasks\",\"Prioritize the tasks resembling TKT-123\"]\n\nInput: Post an AI generated image on twitter. Monitor the number of likes and retweets. Perform analysis on the collected metrics.\nOutput: [\"Post AI generated image on twitter\",\"Monitor the AI generated post on twitter\",\"Analyze monitored metrics\"]\n\nInput: Generate product reccommendations for the user User-123 based on the summary of all posts made by them.\nOutput: [\"Get all posts by User-123\",\"Summarize the posts by User-123\",\"Generate product reccommendations from summarized posts\"]  \n\nInput: Add all issues P0 issues by User-123 to my sprint. Also create their summary.\nOutput: [\"Get all P0 issues by User-123\",\"Add P0 issues by User-123 to sprint\",\"Summarize the P0 issues by User-123\"]\n\nInput: Could you get all my high priority work items?\nOutput: [\"Get all my work items assigned high priority\"]\n\nInput: %s\nOutput:\n", "tool_getter_prompt": "\nYou a work management bot for a company with access to the following tools:\nYou need to return a tool (if any) that will complete the primary objective of the task using the tool descriptions. Return the empty string if not available Eg:\nTools:\nA: A tool that As\nB: A tool that Bs\nInput: A the task item\nOutput: A\nInput: B the task item\nOutput: B\nInput: C the task item\nOutput: None\n\nTools: %s\nInput: %s\nOuput:\n", "subtask_solution_prompt": "\nYou're a issue management bot. Given a tool and directive, you strictly use values in the Past Actions or the directive to map to argument values mentioned in the \"Tool\" Section. If there is some information missing you return the action to get the missing information. Eg:\n\nDirective:Summarize the work items similar to TKT-123\n\nTool:summarize_objects with args:\n- objects (Array[Object]): The objects to summarize\n\nPast Actions:\n- Prioritize the work items similar to TKT-123:prioritize_work_items\n- Get all similar work items to TKT-123: get_similar_work_items\n- Get the ID of the current User: who_am_i\n- Get the current sprint: get_current_sprint\n\nOutput:{\"result\":[(\"objects\",\"get_similar_work_items\")],\"missing_action\":\"\"}\n---\nDirective:Get my P0 issues on part DEV-PART-123\n\nTool:get_items with args:\n- applies_to_part (Array[String]): Filters for work belonging to any of the provided parts.\n- owned_by (Array[String]): Filters for work owned by any of these users\n- created_by (Array[String]): Filters for work created by any of these users\n- issue.priority (Array[String]): Filters for issues with any of the provided priorities allowing: ['p0', 'p1', 'p2', 'p3']\n\nPast Actions:\n- Get the ID of the current User: who_am_i\n- Get the current sprint: get_current_sprint\n\nOutput:{\"result\":[(\"owned_by\",\"who_am_i\"),(\"issue.priority\",\"p0\"),(\"applies_to_part\",\"DEV-PART-123\")],\"missing_action\":\"\"}\n---\nDirective: Close all unresolved issues\n\nTool: close_issues with args:\n- issues (Array[Object]): List of issues to close\n\nPast Actions:\n\nOutput: {\"result\": [], \"missing_action\": \"Get the list of unresolved issues\"}\n---\nDirective: Move all tasks to the next sprint\n\nTool: move_issues with args:\n- issues (Array[Object]): List of issues to move\n- destination_sprint (String): The sprint to move the issues to\n\nPast Actions:\n- Get the ID of the current User: who_am_i\n- Get the next sprint: get_next_sprint\n\nOutput: {\"result\": [], \"missing_action\": \"Get the list of all tasks\"}\n---\nDirective: Prioritize my P0 issues\n\nTool:prioritize_objects with args:\n- objects (Array[Object]): The objects to prioritze\n\nPast Actions:\n- Get the ID of the current User: who_am_i\n- Get the current sprint: get_current_sprint\n\nOutput: {\"result\":[],\"missing_action\":\"Get my P0 issues\"}\n---\n"}