"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Get issues made by users in my team
Tool:get_items with args:
- applies_to_part (Array[String]): Filters for work belonging to any of the provided parts.
- owned_by (Array[String]): Filters for work owned by any of these users
- created_by (Array[String]): Filters for work created by any of these users
- issue.priority (Array[String]): Filters for issues with any of the provided priorities allowing: [""p0"", ""p1"", ""p2"", ""p3""]
Past Actions/Knowledge:",{'missing_action': 'Get user details of my team'}
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Move all files with names starting with ""feature-file"" to the folder ""folder-123""
Tool:move_files with args:
- files (Array[String]): The files to move
- destination (String): The destination folder
- delete (Boolean): Whether to delete the files after moving them
- overwrite (Boolean): Whether to overwrite the files if they already exist at destination
Past Actions/Knowledge:
- Get the id of the current user: who_am_i
- Get the current sprint: get_current_sprint
- Get the name of the current branch: get_current_branch
- Get the name current repository: get_current_repository","{'missing_action': ""Get all files with names starting with 'feature-file'""}"
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Prioritize tasks related to customer feedback
Tool: prioritize_tasks with args:
- tasks (Array[Object]): List of tasks to prioritize
Past Actions:
- Get the ID of the current User: who_am_i
- Retrieve tasks related to customer feedback: fetch_feedback_tasks","{'result': [('tasks', 'fetch_feedback_tasks')]}"
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Close all unresolved bugs in the system
Tool: close_issues with args:
- issues (Array[Object]): List of issues to close
- issue.type (Array[String]): Filters for issues by the type [""Bug"", ""Feature"", ""Optimisation""]
- issue.status (String): Filters for issues by the status allowing [""Unresolved"", ""Resolved"", ""Abandoned""]
Past Actions/Knowledge:
- Get the list of all bugs: get_all_bugs","{'result': [('issues', 'get_all_bugs'), ('issue.type', ['Bug']), ('issue.status', 'Unresolved')]}"
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive:Get all my high priority issues in backlog
Tool: get_backlog_items with args:
- applies_to_part (Array[String]): Filters for work belonging to any of the provided parts.
- created_by (Array[String]): Filters for work created by any of these users.
- owned_by (Array[String]): Filters for work owned by any of these users.
- issue.rev_orgs (Array[String]): Filters for issues with any of the provided Rev organizations
- issue.priority (Array[String]): Filters for issues with any of the provided priorities allowing: ['p0', 'p1', 'p2', 'p3']
- limit (Number): The maximum number of works to return.
- stage.name (Array[String]): Filters for records in the provided stage(s) by name
- ticket.needs_response (Boolean): Filters for tickets that need a response
- ticket.severity (Array[String]): Filters for tickets with any of the provided severities allowing: ['blocker', 'high', 'low', 'medium']
- ticket.source_channel (Array[String]): Filters for tickets with any of the provided source channels allowing: []
- types (Array[String]): Filters for work of the provided types. allowing: ['issue', 'ticket', 'task']
Past Actions:
- Returns the ID of the current user: who_am_i
- Returns the ID of the current sprint: get_sprint_id","{'result': [('owned_by', ['who_am_i']), ('issue.priority', ['high'])]}"
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Get all high severity tickets coming in from slack from customer Cust123
Tool: works_list with args:
- applies_to_part (Array[String]): Filters for work belonging to any of the provided parts.
- created_by (Array[String]): Filters for work created by any of these users.
- owned_by (Array[String]): Filters for work owned by any of these users.
- issue.rev_orgs (Array[String]): Filters for issues with any of the provided Rev organizations
- issue.priority (Array[String]): Filters for issues with any of the provided priorities allowing: ['p0', 'p1', 'p2', 'p3']
- limit (Number): The maximum number of works to return.
- stage.name (Array[String]): Filters for records in the provided stage(s) by name
- ticket.needs_response (Boolean): Filters for tickets that need a response
- ticket.severity (Array[String]): Filters for tickets with any of the provided severities allowing: ['blocker', 'high', 'low', 'medium']
- ticket.source_channel (Array[String]): Filters for tickets with any of the provided source channels
- types (Array[String]): Filters for work of the provided types. allowing: ['issue', 'ticket', 'task']
Past Actions:
- Returns the ID of the current user: who_am_i
- Returns the ID of the current sprint: get_sprint_id",{'missing_action': 'Get objects related to customer Cust123'}
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Move all unresolved bugs to the next sprint
Tool: move_issues with args:
- issues (Array[Object]): List of issues to move
- destination_sprint (String): The sprint to move the issues to
Past Actions:
- Get the ID of the current User: who_am_i
- Get the next sprint: get_next_sprint",{'missing_action': 'Get the list of unresolved bugs'}
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Show a list of my tasks pending review
Tool: get_info_on_tasks with args:
- tasks (Array[Object]): List of tasks to include in the pending review list
- assigned_to (Array[String]): List of users to the tasks are assigned to
- status (Array[String]): The status of the tasks to filter allowing: [""Completed"", ""In Progress"", ""Overdue""]
- priority (String): The priority of the tasks to filter allowing: [""High"", ""Medium"", ""Low"", ""Blocker""]
- reviewers (Array[String]): User ids of the reviewers
Past Actions:",{'missing_action': 'Get the user id of current user'}
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Get action items from T
Tool: get_action_items_from_text with args:
- text (String): The text from which the actionable insights need to be created
Past Actions/Knowledge:
- Get the ID of the current User: who_am_i
- Get the current sprint: get_current_sprint","{'result': [('text', 'T')]}"
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Find all tasks related to the 'Feature-123','Feature-456' and 'Feature-789' feature
Tool: find_related_tasks with args:
- features (Array[String]): Name of the feature to find related tasks
- priority (String): The priority of the tasks to filter allowing: [""high"", ""low"", ""medium""]
- organization (String): The organization of the tasks to filter
- status (Array[String]): The status of the tasks to filter allowing: [""Completed"", ""In Progress"", ""Overdue""]
Past Actions:
- Get the ID of the current User: who_am_i
- Search for tasks related to 'Feature-123': search_related_tasks","{'result': [('features', ['Feature-123', 'Feature-456', 'Feature-789'])]}"
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Add my prioritized P0 issues to the current sprint 
Tool: add_work_to_sprint with args:
- objects (Array[Object]): List of objects to add to the sprint
- sprint (String): The sprint to add the objects to
Past Actions:
- Prioritize my P0 issues: prioritize_objects
- Get my P0 issues: works_list
- Returns the ID of the current user: who_am_i
- Returns the ID of the current sprint: get_sprint_id","{'result': [('objects', 'prioritize_objects'), ('sprint', 'get_sprint_id')]}"
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Send an email to User-123 regarding issue I-123.
Tool: send_email with args:
- to (String): The email address of the recipient
- from (String): The email address of the sender
- subject (String): The subject of the email
- body (String): The body of the email
Past Actions/Knowledge:
- Get user details of User-123: get_user_details
- Summarize issue I-123: summarize_objects
- Returns the ID of the current User: who_am_i","{'result': [('to', 'get_user_details'), ('from', 'who_am_i'), ('subject', 'Regarding issue I-123'), ('body', 'summarize_objects')]}"
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Create a report for completed user stories
Tool: generate_report with args:
- stories (Array[Object]): List of user stories to generate a report for
Past Actions:
- Get the ID of the current User: who_am_i
- Get the current sprint: get_current_sprint",{'missing_action': 'Get the list of completed user stories'}
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Find all tasks related to the 'New Feature' in the upcoming sprint
Tool: find_related_tasks with args:
- feature_name (String): Name of the feature to find related tasks
- sprint (String): The upcoming sprint for task search
Past Actions:
- Get the ID of the current User: who_am_i
- Get the upcoming sprint: get_upcoming_sprint","{'result': [('feature_name', 'New Feature'), ('sprint', 'get_upcoming_sprint')]}"
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Add my P0 issues to the current sprint 
Tool: add_work_to_sprint with args:
- objects (Array[Object]): List of objects to add to the sprint
- sprint (String): The sprint to add the objects to
Past Actions:
- Returns the ID of the current user: who_am_i
- Returns the ID of the current sprint: get_sprint_id",{'missing_action': 'Get my P0 issues'}
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Move all tasks with the 'enhancement' label to the 'Next Release' sprint
Tool: move_tasks_to_sprint with args:
- tasks (Array[Object]): List of tasks to move
- destination_sprint (String): The sprint to move tasks to
- delete (Boolean): Whether to delete the tasks after moving them
Past Actions:
- Get the ID of the current User: who_am_i
- Retrieve tasks with 'enhancement' label: get_enhancement_tasks","{'result': [('tasks', 'get_enhancement_tasks'), ('label', 'enhancement'), ('destination_sprint', 'Next Release')]}"
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Identify tasks with overdue deadlines in the 'Marketing' project
Tool: filter_tasks with args:
- tasks (Array[Object]): List of tasks to check for overdue status
- project (String): Name of the project to filter tasks
- status (Array[String]): The status of the tasks to filter allowing: [""Completed"", ""In Progress"", ""Overdue""]
Past Actions:
- Get the ID of the current User: who_am_i
- Get the current sprint: get_current_sprint
- Call my manager: call_user","{'result': [('project', 'Marketing'), ('status', ['Overdue'])]}"
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Reassign unresolved issues to the support team
Tool: reassign_issues with args:
- issues (Array[Object]): List of issues to reassign
- new_assignee (String): The user to reassign the issues to
Past Actions:
- Get the ID of the current User: who_am_i
- Get the current sprint: get_current_sprint",{'missing_action': 'Get the list of unresolved issues'}
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive:Get my P0 issues on all objects containing the word ""AI""
Tool:get_items with args:
- applies_to_part (Array[String]): Filters for work belonging to any of the provided parts.
- owned_by (Array[String]): Filters for work owned by any of these users
- created_by (Array[String]): Filters for work created by any of these users
- issue.priority (Array[String]): Filters for issues with any of the provided priorities allowing: [""p0"", ""p1"", ""p2"", ""p3""]
Past Actions/Knowledge:
- the ID of the current User: who_am_i","{'missing_action': ""Get all parts containing the word 'AI'""}"
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Find all tasks related to the 'Feature-123' feature
Tool: find_related_tasks with args:
- feature_name (String): Name of the feature to find related tasks
Past Actions:
- Get the ID of the current User: who_am_i
- Search for tasks related to 'Feature-123': search_related_tasks","{'result': [('feature_name', 'Feature-123')]}"
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Find unresolved requests for features in the last release
Tool: find_issues with args:
- part_description (Array[String]): Part of the description of the issues to find
- organization (String): The organization of the issues to find
- name (String): The name of the issues to find
- issue_type (String): The type of issues to find allowing: [""Bug"", ""Feature Request"", ""Task""]
- status (Array[String]): The status of the issues to find allowing: [""Abandoned"", ""Resolved"", ""Unresolved""]
- release_version (String): The version of the release to search in
Past Actions:
- Get the ID of the current User: who_am_i
- Get the current sprint: get_current_sprint
- Get high-priority issues: get_high_priority_issues
- Get my manager issues: get_user_id
- Mail my manager: mail_user
- Get last release: get_last_release","{'result': [('issue_type', 'Feature Request'), ('status', ['Unresolved']), ('release_version', 'get_last_release')]}"
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Prioritize tasks T-1, T-2 and T-54 related to customer feedback
Tool: prioritize_tasks with args:
- tasks (Array[Object]): List of tasks to prioritize
Past Actions:
- Get the ID of the current User: who_am_i
- Retrieve tasks related to customer feedback: fetch_feedback_tasks","{'result': [('tasks', ['T-1', 'T-2', 'T-45'])]}"
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Assign all critical issues to DEV-TEAM
Tool: assign_issues with args:
- issues (Array[Object]): List of issues to assign
- assignee (String): The user to assign the issues to
Past Actions:
- Get the current sprint: get_current_sprint",{'missing_action': 'Get the list of critical issues'}
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Get my issues on all objects made by my Manager
Tool:get_items with args:
- applies_to_part (Array[String]): Filters for work belonging to any of the provided parts.
- owned_by (Array[String]): Filters for work owned by any of these users
- created_by (Array[String]): Filters for work created by any of these users
- issue.priority (Array[String]): Filters for issues with any of the provided priorities allowing: [""p0"", ""p1"", ""p2"", ""p3""]
Past Actions/Knowledge:
- Get all parts containing the word ""AI"": get_objects_by_keyword
- the ID of the current User: who_am_i
- the current sprint: get_current_sprint",{'missing_action': 'Get user details of my Manager'}
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Create a new high-priority issue from action item creted from T in the current backlog
Tool:create_issue with args:
- summary (String): A brief, one-sentence description of the issue
- description (String): A detailed description of the issue
- priority (String): Priority of the issue allowing: [""High"", ""Medium"", ""Low"", ""Blocker""]
- backlog (Array[String]): The backlog to add the issue to
Past Actions/Knowledge:
- Get list of available priorities: get_available_priorities
- Get action items created from T: get_action_items_from_text
- Get Current backlog: get_backlog_issues
- Get the ID of the current User: who_am_i","{'result': [('summary', ''), ('description', ''), ('priority', 'High'), ('backlog', 'get_backlog_issues')]}"
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Summarize the work items similar to TKT-123
Tool:summarize_objects with args:
- objects (Array[Object]):The objects to summarize
Past Actions/Knowledge:
- Prioritize the work items similar to TKT-123: prioritize_work_items
- Get all similar work items to TKT-123: get_similar_work_items
- the ID of the current User: who_am_i
- the current sprint:get_current_sprint","{'result': [('objects', 'get_similar_work_items')]}"
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Find all high and medium tasks related to the 'Feature-123','Feature-456' and 'Feature-789' feature
Tool: find_related_tasks with args:
- features (Array[String]): Name of the feature to find related tasks
- priority (String): The priority of the tasks to filter allowing: [""high"", ""low"", ""medium""]
- organization (String): The organization of the tasks to filter
- status (Array[String]): The status of the tasks to filter allowing: [""Completed"", ""In Progress"", ""Overdue""]
Past Actions:
- Get the ID of the current User: who_am_i
- Search for tasks related to 'Feature-123': search_related_tasks","{'result': [('features', ['Feature-123', 'Feature-456', 'Feature-789']), ('priority', ['high', 'medium'])]}"
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Move all high-priority tasks to the 'P1-HighPriority' project
Tool: move_tasks with args:
- tasks (Array[Object]): List of tasks to move
- destination_project (String): The project to move tasks to, e.g., ""P1-HighPriority""
- notify (Boolean): Whether to notify the assignee of the task about the move
- reset_progress (Boolean): Whether to reset the progress of the tasks after moving them
Past Actions:
- Get the ID of the current User: who_am_i
- Retrieve high-priority tasks: fetch_tasks_by_property
- Get the 'P1-HighPriority' project: get_high_priority_project","{'result': [('tasks', 'fetch_tasks_by_property'), ('destination_project', ""'P1-HighPriority'"")]}"
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Move all tasks to the next sprint
Tool: move_issues with args:
- issues (Array[Object]): List of issues to move
- destination_sprint (String): The sprint to move the issues to
Past Actions/Knowledge:
- the ID of the current User: who_am_i
- the next sprint: get_next_sprint",{'missing_action': 'Get the list of all tasks'}
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Create a summary of all tasks completed by the team this month
Tool: summarize_tasks with args:
- tasks (Array[Object]): List of tasks to include in the summary
- time_period (String): The time period for the summary allowing: [""this_month"", ""last_month"", ""this_week"", ""last_week"", ""today""]
Past Actions:
- Get the ID of the current User: who_am_i
- Get the completed tasks for the team this month: get_task_information","{'result': [('tasks', 'get_task_information'), ('time_period', 'this_month')]}"
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Assign a UI/UX designer to tasks in sprint S-456
Tool: assign_user with args:
- task_keys (Array[String]): The keys of the tasks to assign
- user_key (Array[String]): The key of the UI/UX designer to assign to the issue
Past Actions/Knowledge:
- List of available UI/UX designers: get_available_workers
- the ID of the current User: who_am_i
- the current sprint: get_current_sprint",{'missing_action': 'Get tasks in sprint S-456'}
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Update status of all tasks in progress to completed
Tool: update_status with args:
- tasks (Array[Object]): List of tasks to update
- new_status (String): The new status for the tasks
Past Actions:
- Get the ID of the current User: who_am_i
- Get the current sprint: get_current_sprint",{'missing_action': 'Get the list of tasks in progress'}
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Add my P0 issues to the current sprint 
Tool: add_work_to_sprint with args:
- objects (Array[Object]): List of objects to add to the sprint
- sprint (String): The sprint to add the objects to
Past Actions:
- Returns the ID of the current user: who_am_i
- Returns the ID of the current sprint: get_sprint_id
- Get my P0 issues: works_list","{'result': [('objects', 'works_list'), ('sprint', 'get_sprint_id')]}"
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Close all unresolved support tickets
Tool: close_issues with args:
- issues (Array[Object]): List of issues to close
Past Actions/Knowledge:
- Get the list of all users: get_all_users",{'missing_action': 'Get the list of unresolved support tickets'}
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Reassign unresolved issues to the support team
Tool: reassign_issues with args:
- issues (Array[Object]): List of issues to reassign
- new_assignee (Array[String]): The users to reassign the issues to
Past Actions:
- Get the ID of the current User: who_am_i
- Get the current sprint: get_current_sprint
- Get team information: get_team_information
- Get unresolved issues: get_unresolved_issues","{'result': [('issues', 'get_unresolved_issues'), ('new_assignee', 'get_team_information')]}"
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Get high severity tickets from the customer UltimateCustomer
Tool: works_list with args:
- applies_to_part (Array[String]): Filters for work belonging to any of the provided parts.
- created_by (Array[String]): Filters for work created by any of these users.
- owned_by (Array[String]): Filters for work owned by any of these users.
- issue.rev_orgs (Array[String]): Filters for issues with any of the provided Rev organizations
- issue.priority (Array[String]): Filters for issues with any of the provided priorities allowing: ['p0', 'p1', 'p2', 'p3']
- limit (Number): The maximum number of works to return.
- stage.name (Array[String]): Filters for records in the provided stage(s) by name
- ticket.needs_response (Boolean): Filters for tickets that need a response
- ticket.severity (Array[String]): Filters for tickets with any of the provided severities allowing: ['blocker', 'high', 'low', 'medium']
- ticket.source_channel (Array[String]): Filters for tickets with any of the provided source channels allowing: []
- types (Array[String]): Filters for work of the provided types. allowing: ['issue', 'ticket', 'task']
Past Actions:
- Get objects related to customer UltimateCustomer: search_objects_by_name
- Returns the ID of the current user: who_am_i
- Returns the ID of the current sprint: get_sprint_id","{'result': [('applies_to_part', 'search_objects_by_name'), ('ticket.severity', 'high')]}"
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Assign all unresolved issues to me
Tool: assign_issues with args:
- issues (Array[Object]): List of issues to assign
- assignees (Array[String]): List of users to assign the issues to
Past Actions:
- Get the ID of the current User: who_am_i
- Get my team members: get_team_information
- Get all unresolved issues: get_issues_by_filter","{'result': [('issues', 'get_issues_by_filter'), ('assignees', ['who_am_i'])]}"
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Assign a QA tester to Project P-789
Tool: assign_user with args:
- task_key (String): The key of the task to assign
- user_key (Array[String]): The key of the QA tester to assign to the issue
Past Actions/Knowledge:
- List of available QA testers: get_available_qa_testers
- the ID of the current User: who_am_i
- the current sprint: get_current_sprint","{'result': [('task_key', 'P-789'), ('user_key', 'get_available_qa_testers')]}"
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Close all tasks in the 'Testing' phase
Tool: close_tasks_in_phase with args:
- tasks (Array[Object]): List of tasks to close
- reason (String): The reason for closing the tasks
- delete (Boolean): Whether to delete the tasks after closing them
Past Actions:
- Get the ID of the current User: who_am_i
- Retrieve tasks in the 'Testing' phase: get_tasks","{'result': [('tasks', 'get_testing_phase_tasks')]}"
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Summarize all the completed tasks from the last sprint
Tool: summarize_objects with args:
- objects (Array[Object]): The objects to summarize
Past Actions/Knowledge:
- Get the id of the current user: who_am_i
- Get the id of the current sprint: get_current_sprint
- Returns all completed tasks from the last sprint: get_completed_tasks
- Get last sprint: get_last_sprint
- Get the name of the current branch: get_current_branch","{'result': [('objects', 'get_completed_tasks')]}"
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Mark tasks collected with a tag urgent for the upcoming sprint
Tool: prioritize_tagged_tasks with args:
- tasks (Array[Object]): List of tasks to prioritize
- tag (String): The tag to mark the tasks with allowing: [""urgent"", ""triage"", ""critical""]
- sprint (String): The sprint to prioritize the tasks for
Past Actions:
- Get the ID of the current User: who_am_i
- Collect tasks assigned to me: get_task_by_assignee
- Get the upcoming sprint: get_upcoming_sprint","{'result': [('tasks', 'get_task_by_assignee'), ('tag', 'urgent'), ('sprint', 'get_upcoming_sprint')]}"
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Find for feature requests that were unresolved in the last release
Tool: find_issues with args:
- part_description (Array[String]): Part of the description of the issues to find
- organization (String): The organization of the issues to find
- name (String): The name of the issues to find
- issue_type (Array[String]): The type of issues to find allowing: [""Bug"", ""Feature Request"", ""Task""]
- status (Array[String]): The status of the issues to find allowing: [""Abandoned"", ""Resolved"", ""Unresolved""]
- release_version (String): The version of the release to search in
Past Actions:
- Get the ID of the current User: who_am_i
- Get the current sprint: get_current_sprint
- Get high-priority issues: get_high_priority_issues
- Get my manager issues: get_user_id
- Mail my manager: mail_user
- Get last release: get_last_release","{'result': [('issue_type', ['Feature Request']), ('status', ['Unresolved']), ('release_version', 'get_last_release')]}"
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Get related objects to customer UltimateCustomer
Tool: review_and_close with args:
- query (String): The search string, could be for example customer’s name, part name, user name.
Past Actions:
- Get the ID of the current User: who_am_i
- Get the current sprint: get_current_sprint","{'result': [('query', 'UltimateCustomer')]}"
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Get objects related to me
Tool: review_and_close with args:
- query (String): The search string, could be for example customer’s name, part name, user name.
Past Actions:
- Get the ID of the current User: who_am_i
- Get the current sprint: get_current_sprint","{'result': [('query', 'who_am_i')]}"
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Update status of tasks in the backlog to 'In Progress'
Tool: update_issue_status with args:
- issues (Array[Object]): List of issues to update
- new_status (String): The new status for the issues
Past Actions:
- Get the ID of the current User: who_am_i
- Get the current sprint: get_current_sprint",{'missing_action': 'Get the list of tasks in the backlog'}
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Retrieve details for TKT-789
Tool: get_issue_details with args:
- issue_key (String): The key of the issue to retrieve details for
Past Actions:
- Get the ID of the current User: who_am_i","{'result': [('issue_key', 'TKT-789')]}"
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Create issues from summarized work items similar to TKT-123
Tool: get_action_items_from_text with args:
- text (String): The text from which the actionable insights need to be created
Past Actions/Knowledge:
- Get all work items similar to TKT-123: get_similar_work_items
- Get the ID of the current User: who_am_i
- Get the current sprint: get_current_sprint",{'missing_action': 'Summarize the work items similar to TKT-123'}
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Summarize my P0 issues
Tool:summarize_objects with args:
- objects (Array[Object]):The objects to summarize
Past Actions/Knowledge:
- the ID of the current User: who_am_i",{'missing_action': 'Get my P0 issues'}
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Add the new task to my current project
Tool: add_task with args:
- task (Object): The task to be added to the project
- project (String): Project to which the task should be added
Past Actions:
- Create a new task with description D: create_task
- Get the ID of the current User: who_am_i
- Get my curretn project: get_projects","{'result': [('project', 'get_projects'), ('task', 'create_task')]}"
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Summarize unresolved issues given to me and and my team members
Tool: summarize_issues with args:
- issues (Array[Object]): List of issues to summarize
Past Actions:
- Get the ID of the current User: who_am_i
- Get current_sprint: get_current_sprint
- Get all unresolved issues: get_issues_by_filter",{'missing_action': 'Get all unresolved issues given to me and my team members'}
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Commit my changes to the current repository on a branch named ""feature-123""
Tool:commit_changes with args:
- repository (String): The repository to commit to
- description (String): A detailed description of the commit
- branch (String): The branch to commit to
Past Actions/Knowledge:
- Get the changes summary: get_changes_summary
- Get the name of the current branch: get_current_branch
- Get the name current repository: get_current_repository","{'result': [('repository', 'get_current_repository'), ('description', 'get_changes_summary'), ('branch', 'feature-123')]}"
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Create issues from summarized work items
Tool: get_action_items_from_text with args:
- text (String): The text from which the actionable insights need to be created
Past Actions/Knowledge:
- Summarize the work items similar to TKT-123: summarize_objects
- Get all work items similar to TKT-123: get_similar_work_items
- Get the ID of the current User: who_am_i
- Get the current sprint: get_current_sprint","{'result': [('text', 'summarize_objects')]}"
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Prioritize unresolved issues given to me and and my team members
Tool: prioritize_issues with args:
- issues (Array[Object]): List of issues to prioritize
Past Actions:
- Get the ID of the current User: who_am_i
- Get all unresolved issues given to me and my team members: get_issues_by_filter","{'result': [('issues', 'get_issues_by_filter')]}"
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Dial up the user User-123
Tool: call_user with args:
- contact_details (Object): The contact details of the user
Past Actions/Knowledge:
- the ID of the current User: who_am_i
- the current sprint: get_current_sprint",{'missing_action': 'Get user details of User-123'}
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Update status of tasks in the backlog to 'In Progress'
Tool: update_issue_properties with args:
- issues (Array[Object]): List of issues to update
- new_status (String): The new status for the issues
- priority (String): The new priority for the issues allowing: [""high"", ""low"", ""medium""]
- sprint (String): The sprint to update the issues for
- notify (Boolean): Whether to notify the assignee of the issue about the update
Past Actions:
- Get the ID of the current User: who_am_i
- Get tasks in backlog: get_related_tasks","{'result': [('issues', 'get_related_tasks'), ('status', 'In Progress')]}"
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Move files ""file-123"", ""file-ABC"" and ""file-678"" to the folder ""folder-123""
Tool:move_files with args:
- files (Array[String]): The files to move
- destination (String): The destination folder
Past Actions/Knowledge:
- Get files with names starting with ""feature-file"": get_files_by_name
- Get the name of the current branch: get_current_branch
- Get the name current repository: get_current_repository","{'result': [('files', ['file-123', 'file-ABC', 'file-678']), ('destination', 'folder-123')]}"
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive:Get all high severity tickets coming in from slack from customer Cust123
Tool: works_list with args:
- applies_to_part (Array[String]): Filters for work belonging to any of the provided parts.
- created_by (Array[String]): Filters for work created by any of these users
- owned_by (Array[String]): Filters for work owned by any of these users
- issue.rev_orgs (Array[String]): Filters for issues with any of the provided Rev organizations
- issue.priority (Array[String]): Filters for issues with any of the provided priorities allowing: ['p0', 'p1', 'p2', 'p3']
- limit (Number): The maximum number of works to return.
- stage.name (Array[String]): Filters for records in the provided stage(s) by name
- ticket.needs_response (Boolean): Filters for tickets that need a response
- ticket.severity (Array[String]): Filters for tickets with any of the provided severities allowing: ['blocker', 'high', 'low', 'medium']
- ticket.source_channel (String): Filters for tickets with any of the provided source channels
- types (String): Filters for work of the provided types allowing: ['issue', 'ticket', 'task']
Past Actions:
- Returns the ID of the current user: who_am_i
- Returns the ID of the current sprint: get_sprint_id",{'missing_action': 'Get all objects related to customer Cust123'}
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive:Get my P0 issues
Tool: works_list with args:
- applies_to_part (Array[String]): Filters for work belonging to any of the provided parts.
- created_by (Array[String]): Filters for work created by any of these users.
- owned_by (Array[String]): Filters for work owned by any of these users.
- issue.rev_orgs (Array[String]): Filters for issues with any of the provided Rev organizations
- issue.priority (Array[String]): Filters for issues with any of the provided priorities allowing: ['p0', 'p1', 'p2', 'p3']
- limit (Number): The maximum number of works to return.
- stage.name (Array[String]): Filters for records in the provided stage(s) by name
- ticket.needs_response (Boolean): Filters for tickets that need a response
- ticket.severity (Array[String]): Filters for tickets with any of the provided severities allowing: ['blocker', 'high', 'low', 'medium']
- ticket.source_channel (Array[String]): Filters for tickets with any of the provided source channels allowing: []
- types (Array[String]): Filters for work of the provided types. allowing: ['issue', 'ticket', 'task']
Past Actions:
- Returns the ID of the current user: who_am_i
- Returns the ID of the current sprint: get_sprint_id","{'result': [('owned_by', ['who_am_i']), ('issue.priority', ['p0'])]}"
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive:Summarize my P0 issues
Tool: summarize_objects with args:
- objects (Array[Object]): List of objects to summarize
Past Actions:
- Returns the ID of the current user: who_am_i
- Returns the ID of the current sprint: get_sprint_id",{'missing_action': 'Get my P0 issues'}
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Reassign unresolved issues to the support team
Tool: reassign_issues with args:
- issues (Array[Object]): List of issues to reassign
- new_assignee (Array[String]): The users to reassign the issues to
Past Actions:
- Get the ID of the current User: who_am_i
- Get the current sprint: get_current_sprint
- Get unresolved issues: get_unresolved_issues",{'missing_action': 'Get the support team ids'}
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Prioritize unresolved issues given to me and and my team members
Tool: prioritize_issues with args:
- issues (Array[Object]): List of issues to prioritize
Past Actions:
- Get the ID of the current User: who_am_i
- Get current_sprint: get_current_sprint
- Get all unresolved issues: get_issues_by_filter",{'missing_action': 'Get all unresolved issues given to me and my team members'}
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Summarize unresolved issues given to me and and my team members
Tool: summarize_issues with args:
- issues (Array[Object]): List of issues to summarize
Past Actions:
- Get the ID of the current User: who_am_i
- Get all unresolved issues given to me and my team members: get_issues_by_filter","{'result': [('issues', 'get_issues_by_filter')]}"
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive:Get all P0 issues owned by me
Tool: works_list with args:
- applies_to_part (Array[String]): Filters for work belonging to any of the provided parts.
- created_by (Array[String]): Filters for work created by any of these users.
- owned_by (Array[String]): Filters for work owned by any of these users.
- issue.rev_orgs (Array[String]): Filters for issues with any of the provided Rev organizations
- issue.priority (Array[String]): Filters for issues with any of the provided priorities allowing: ['p0', 'p1', 'p2', 'p3']
- limit (Number): The maximum number of works to return.
- stage.name (Array[String]): Filters for records in the provided stage(s) by name
- ticket.needs_response (Boolean): Filters for tickets that need a response
- ticket.severity (Array[String]): Filters for tickets with any of the provided severities allowing: ['blocker', 'high', 'low', 'medium']
- ticket.source_channel (Array[String]): Filters for tickets with any of the provided source channels allowing: []
- types (Array[String]): Filters for work of the provided types. allowing: ['issue', 'ticket', 'task']
Past Actions:
- Returns the ID of the current user: who_am_i
- Returns the ID of the current sprint: get_sprint_id","{'result': [('owned_by', ['who_am_i']), ('issue.priority', ['p0'])]}"
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Review and close all completed feature requests
Tool: review_and_close with args:
- work_items (Array[Object]): List of feature requests to review and close
Past Actions:
- Get the ID of the current User: who_am_i
- Get the current sprint: get_current_sprint",{'missing_action': 'Get the list of completed feature requests'}
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Reassign high-priority tasks to available team members
Tool: reassign_tasks with args:
- tasks (Array[Object]): List of high-priority tasks to reassign
- assignes (Array[String]): List of team members available for reassignment
Past Actions:
- Get the ID of the current User: who_am_i
- Retrieve high-priority tasks: fetch_org_tasks
- Identify available team members: get_available_users","{'result': [('tasks', 'fetch_org_tasks'), ('assignes', 'get_available_users')]}"
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Assign unresolved issues to team members for resolution
Tool: issue_assigner with args:
- issues (Array[Object]): List of issues to assign
- assignees (Array[String]): List of team members to assign issues
Past Actions:
- Get the ID of the current User: who_am_i
- Get unresolved issues: get_unresolved_issues
- Identify team members for assignment: get_team_members","{'result': [('issues', 'get_unresolved_issues'), ('assignees', 'get_team_members')]}"
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive:Summarize the high severity tickets coming in from slack from customer Cust123
Tool: summarize_objects with args:
- objects (Array[Object]): List of objects to summarize
Past Actions:
- Get the high severity tickets coming in from slack from customer Cust123: get_high_severity_tickets: works_list
- Returns the ID of the current user: who_am_i
- Returns the ID of the current sprint: get_sprint_id","{'result': [('objects', 'works_list')]}"
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Schedule a meeting for priority tasks today
Tool: schedule_meeting with args:
- meeting_date (String): The date for the meeting
- tasks (Array[Object]): List of tasks to discuss
Past Actions:
- Get the ID of the current User: who_am_i
- Get the current sprint: get_current_sprint",{'missing_action': 'Get the list of priority tasks'}
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Assign unresolved issues to me and my team members for resolution
Tool: issue_assigner with args:
- issues (Array[Object]): List of issues to assign
- assignees (Array[String]): List of team members to assign issues
Past Actions:
- Get the ID of the current User: who_am_i
- Get unresolved issues: get_unresolved_issues
- Get me and my team members: get_team_members","{'result': [('issues', 'get_unresolved_issues'), ('assignees', 'get_team_members')]}"
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Add the new task with description D to my current project
Tool: add_task with args:
- task (Object): The task to be added to the project
- project (String): Project to which the task should be added
Past Actions:
- Get the ID of the current User: who_am_i
- Get my curretn project: get_projects",{'missing_action': 'Create a new task with description D'}
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Show a list of my tasks pending review by the project manager
Tool: get_info_on_tasks with args:
- assigned_to (String): User to whom the task is assigned to
- status (Array[String]): The status of the tasks to filter allowing: [""Completed"", ""In Progress"", ""Overdue""]
- priority (String): The priority of the tasks to filter allowing: [""High"", ""Medium"", ""Low"", ""Blocker""]
- reviewers (Array[String]): User ids of the reviewers
Past Actions:
- Get the ID of the current User: who_am_i
- Get the id of the project manager: get_user_details","{'result': [('assigned_to', 'who_am_i'), ('reviewer', ['get_user_details'])]}"
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Move all 'Bug' issues to the 'Bug-Fix' sprint
Tool: move_issues with args:
- issues (Array[Object]): List of issues to move
- destination_sprint (String): The sprint to move the issues to
Past Actions:
- Get the ID of the current User: who_am_i
- Get all 'Bug' issues: get_bug_issues","{'result': [('issues', 'get_bug_issues'), ('destination_sprint', 'Bug-Fix')]}"
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Find unresolved bugs in the last release
Tool: find_issues with args:
- part_description (Array[String]): Part of the description of the issues to find
- organization (String): The organization of the issues to find
- name (String): The name of the issues to find
- issue_type (Array[String]): The type of issues to find allowing: [""Bug"", ""Feature Request"", ""Task""]
- status (Array[String]): The status of the issues to find allowing: [""Abandoned"", ""Resolved"", ""Unresolved""]
- release_version (String): The version of the release to search in
Past Actions:
- Get the ID of the current User: who_am_i
- Get the current sprint: get_current_sprint","{'result': [('issue_type', ['Bug']), ('status', ['Unresolved'])]}"
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Pay user User-123 his balance amount
Tool: pay_user with args:
- contact_details (Object): The contact details of the user
- amount (Number): The amount to pay the user
Past Actions/Knowledge:
- Get balance amount of User-123: get_user_balance
- Get user details of User-123: get_user_details
- the current sprint: get_current_sprint","{'result': [('contact_details', 'get_user_details'), ('amount', 'get_user_balance')]}"
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Get related objects to last added part
Tool: review_and_close with args:
- query (String): The search string, could be for example customer’s name, part name, user name.
Past Actions:
- Get the ID of the current User: who_am_i
- Get the current sprint: get_current_sprint",{'missing_action': 'Get the last added part'}
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Get all issues
Tool:get_items with args:
- applies_to_part (Array[String]): Filters for work belonging to any of the provided parts.
- owned_by (Array[String]): Filters for work owned by any of these users
- created_by (Array[String]): Filters for work created by any of these users
- issue.priority (Array[String]): Filters for issues with any of the provided priorities allowing: [""p0"", ""p1"", ""p2"", ""p3""]
Past Actions/Knowledge:",{'result': []}
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Identify tasks with overdue deadlines in the 'Marketing' project
Tool: filter_tasks with args:
- tasks (Array[Object]): List of tasks to check for overdue status
- status (String): The status of the tasks to filter allowing: [""Completed"", ""In Progress"", ""Overdue""]
Past Actions:
- Get the ID of the current User: who_am_i
- Get tasks in the 'Marketing' project: get_tasks_in_project","{'result': [('tasks', 'get_tasks_in_project'), ('status', 'Overdue')]}"
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Create a new Blocking issue with the summary 'Implement feature X'""
Tool:create_issue with args:
- summary (String): A brief, one-sentence description of the issue
- description (String): A detailed description of the issue
- priority (String): Priority of the issue allowing: [""High"", ""Medium"", ""Low"", ""Blocker""]
- backlog (String): The backlog to add the issue to
Past Actions/Knowledge:
- List of available priorities: get_available_priorities
- Get the ID of the current User: who_am_i
- the current sprint: get_current_sprint","{'result': [('summary', 'Implement feature X'), ('description', 'This is a blocking issue to implement feature X'), ('priority', 'Blocker')]}"
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Create a new Blocking issue with the summary ""Implement feature X"" and the description ""Details about implementing feature X""
Tool:create_issue with args:
- summary (String): A brief, one-sentence description of the issue
- description (String): A detailed description of the issue
- priority (String): Priority of the issue allowing: [""High"", ""Medium"", ""Low"", ""Blocker""]
- backlog (String): The backlog to add the issue to
Past Actions/Knowledge:
- List of available priorities: get_available_priorities
- Get the ID of the current User: who_am_i
- the current sprint: get_current_sprint","{'result': [('summary', 'Implement feature X'), ('description', 'Details about implementing feature X'), ('priority', 'Blocker')]}"
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Assign unresolved issues to me and my team members for resolution
Tool: issue_assigner with args:
- issues (Array[Object]): List of issues to assign
- assignees (Array[String]): List of team members to assign issues
Past Actions:
- Get the ID of the current User: who_am_i
- Get unresolved issues: get_unresolved_issues",{'missing_action': 'Get ids of me and my team members'}
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Reassign issues that are unresolved to the support team
Tool: reassign_issues with args:
- issues (Array[Object]): List of issues to reassign
- new_assignee (Array[String]): The users to reassign the issues to
Past Actions:
- Get the ID of the current User: who_am_i
- Get the current sprint: get_current_sprint
- Get team information: get_team_information
- Get unresolved issues: get_unresolved_issues","{'result': [('issues', 'get_unresolved_issues'), ('new_assignee', 'get_team_information')]}"
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Assign tasks in the backlog to team members
Tool: assign_tasks with args:
- tasks (Array[Object]): List of tasks to assign
- team_members (Array[String]): List of team members to assign tasks to
Past Actions:
- Get the backlog tasks: get_tasks
- Get my team members: get_team_information
- Get the ID of the current User: who_am_i","{'result': [('tasks', 'get_tasks'), ('team_members', 'get_team_information')]}"
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Get all files with names starting with ""feature-file""
Tool:search_files_by_name with args:
- name (String): The name of the files to get
Past Actions/Knowledge:
- Get the id of the current user: who_am_i
- Get the current sprint: get_current_sprint
- Get the name of the current branch: get_current_branch
- Get the name current repository: get_current_repository","{'result': [('name', 'feature-file')]}"
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Generate a trend analysis report for Project-A completion time
Tool: generate_trend_report with args:
- type (String): The type of the report to generate, allowing: [""completion_time"", ""completion_rate"", ""resource_utilization""]
- project_name (String): Name of the project for analysis
Past Actions:
- Get the ID of the current User: who_am_i
- Retrieve tasks for trend analysis: get_tasks_for_trend_analysis","{'result': [('type', 'completion_time'), ('project_name', 'Project-A')]}"
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Pay user User-123 his balance amount
Tool: pay_user with args:
- contact_details (Object): The contact details of the user
- amount (Number): The amount to pay the user
Past Actions/Knowledge:
- Returns user details of User-123: get_user_details
- the ID of the current User: who_am_i
- the current sprint: get_current_sprint",{'missing_action': 'Get balance amount of User-123'}
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Assign developers D-123, D-234 and Bob to unresolved tasks in the backlog
Tool: assign_users with args:
- tasks (Array[Object]): List of tasks to assign
- users (Array[String]): List of developers to assign to the tasks
Past Actions/Knowledge:
- List of developers: get_available_developers
- Get the list of unresolved tasks in the backlog: get_backlog_tasks
- the ID of the current User: who_am_i","{'result': [('tasks', 'get_backlog_tasks'), ('users', ['D-123', 'D-234', 'Bob'])]}"
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Move all tasks with the 'enhancement' label to the 'Next Release' sprint
Tool: move_tasks_to_sprint with args:
- tasks (Array[Object]): List of tasks to move
- destination_sprint_id (String): The id sprint to move tasks to
- delete (Boolean): Whether to delete the tasks after moving them
Past Actions:
- Get the ID of the current User: who_am_i
- Retrieve tasks with 'enhancement' label: get_enhancement_tasks
- Get the id of 'Next Release' sprint: get_sprint_id","{'result': [('tasks', 'get_enhancement_tasks'), ('destination_sprint', 'get_sprint_id')]}"
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Reassign unresolved issues to me and and my team members
Tool: reassign_issues with args:
- issues (Array[Object]): List of issues to reassign
- new_assignees (Array[String]): List of users to assign the issues to
Past Actions:
- Get the ID of the current User: who_am_i
- Get all unresolved issues: get_issues_by_filter",{'missing_action': 'Get my team members'}
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Assign highest priority tasks to the development lead
Tool: assign_issues with args:
- issues (Array[Object]): List of issues to assign
- assignee (String): The user to assign the issues to
Past Actions:
- Get the ID of the current User: who_am_i
- Get the current sprint: get_current_sprint",{'missing_action': 'Get the list of highest priority tasks'}
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Dial up the user User-123
Tool: call_user with args:
- contact_details (Object): The contact details of the user
Past Actions/Knowledge:
- Get user details of User-123: get_user_details
- the ID of the current User: who_am_i
- the current sprint: get_current_sprint","{'result': [('contact_details', 'get_user_details')]}"
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Update status of tasks owned by me in the backlog to 'In Progress'
Tool: update_issue_status with args:
- issues (Array[Object]): List of issues to update
- new_status (String): The new status for the issues
Past Actions:
- Get the ID of the current User: who_am_i
- Get the current sprint: get_current_sprint",{'missing_action': 'Get the list of my tasks in the backlog'}
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Schedule a meeting for priority tasks today
Tool: schedule_meeting with args:
- meeting_date (String): The date for the meeting
- tasks (Array[Object]): List of tasks to discuss
Past Actions:
- Get the ID of the current User: who_am_i
- Get high priority tasks: get_tasks
- Get the current sprint: get_current_sprint","{'result': [('meeting_date', 'DATE_TODAY'), ('tasks', 'get_tasks')]}"
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Get the current sprint
Tool:get_current_sprint with args:
Past Actions/Knowledge:
- Get the id of the current user: who_am_i
- Get the id of the current sprint: get_current_sprint
- Returns the name of the current branch: get_current_branch
- Returns the name current repository: get_current_repository",{'result': []}
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Mark high-priority tasks as completed
Tool: mark_completed with args:
- tasks (Array[Object]): List of tasks to mark as completed
Past Actions:
- Get the ID of the current User: who_am_i
- Get the current sprint: get_current_sprint",{'missing_action': 'Get the list of high-priority tasks'}
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Show a list of my tasks pending review by the project manager
Tool: get_info_on_tasks with args:
- tasks (Array[Object]): List of tasks to include in the pending review list
- assigned_to (Array[String]): List of users to the tasks are assigned to
- status (Array[String]): The status of the tasks to filter allowing: [""Completed"", ""In Progress"", ""Overdue""]
- priority (String): The priority of the tasks to filter allowing: [""High"", ""Medium"", ""Low"", ""Blocker""]
- reviewers (Array[String]): User ids of the reviewers
Past Actions:
- Get the ID of the current User: who_am_i",{'missing_action': 'Get the user id of the project manager'}
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Create a report summarizing tasks completed by John Doe
Tool: create_individual_report with args:
- team_member (String): Name of the team member for individual report
- start_date (String): The start date for the report
- end_date (String): The end date for the report
Past Actions:
- Get the ID of the current User: who_am_i","{'result': [('team_member', 'John Doe')]}"
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Update priority of tasks owned by me in the backlog to HIGH
Tool: update_issue_properties with args:
- issues (Array[Object]): List of issues to update
- new_status (String): The new status for the issues
- priority (String): The new priority for the issues allowing: [""high"", ""low"", ""medium""]
- sprint (String): The sprint to update the issues for
- notify (Boolean): Whether to notify the assignee of the issue about the update
Past Actions:
- Get the ID of the current User: who_am_i
- Get my tasks in backlog: get_related_tasks","{'result': [('issues', 'get_related_tasks'), ('priority', 'high')]}"
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Move all tasks with the 'enhancement' label to the 'Next Release' sprint
Tool: move_tasks_to_sprint with args:
- tasks (Array[Object]): List of tasks to move
- label (String): The label to filter tasks
- destination_sprint_id (String): The id sprint to move tasks to
Past Actions:
- Get the ID of the current User: who_am_i
- Retrieve tasks with 'enhancement' label: get_enhancement_tasks","{'missing_action': ""Get the id of 'Next Release' sprint""}"
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Get issues made by users U-123 and U-456
Tool:get_items with args:
- applies_to_part (Array[String]): Filters for work belonging to any of the provided parts.
- owned_by (Array[String]): Filters for work owned by any of these users
- created_by (Array[String]): Filters for work created by any of these users
- issue.priority (Array[String]): Filters for issues with any of the provided priorities allowing: [""p0"", ""p1"", ""p2"", ""p3""]
Past Actions/Knowledge:
- Get all parts containing the word ""AI"": get_objects_by_keyword
- the ID of the current User: who_am_i","{'result': [('created_by', ['U-123', 'U-456'])]}"
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Reassign unresolved issues to me and User-123
Tool: reassign_issues with args:
- issues (Array[Object]): List of issues to reassign
- new_assignees (Array[String]): List of users to assign the issues to
Past Actions:
- Get the ID of the current User: who_am_i
- Get all unresolved issues: get_issues_by_filter","{'result': [('issues', 'get_issues_by_filter'), ('new_assignees', ['who_am_i', 'User-123'])]}"
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Move issues I-1, I-2 and I-3 to the 'Bug-Fix' sprint
Tool: move_issues with args:
- issues (Array[Object]): List of issues to move
- destination_sprint (String): The sprint to move the issues to
Past Actions:
- Get the ID of the current User: who_am_i
- Get all 'Bug' issues: get_bug_issues","{'result': [('issues', ['I-1', 'I-2', 'I-3']), ('destination_sprint', 'Bug-Fix')]}"
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive:Get all my P0
Tool: works_list with args:
- applies_to_part (Array[String]): Filters for work belonging to any of the provided parts.
- created_by (Array[String]): Filters for work created by any of these users.
- owned_by (Array[String]): Filters for work owned by any of these users.
- issue.rev_orgs (Array[String]): Filters for issues with any of the provided Rev organizations
- issue.priority (Array[String]): Filters for issues with any of the provided priorities allowing: ['p0', 'p1', 'p2', 'p3']
- limit (Number): The maximum number of works to return.
- stage.name (Array[String]): Filters for records in the provided stage(s) by name
- ticket.needs_response (Boolean): Filters for tickets that need a response
- ticket.severity (Array[String]): Filters for tickets with any of the provided severities allowing: ['blocker', 'high', 'low', 'medium']
- ticket.source_channel (Array[String]): Filters for tickets with any of the provided source channels allowing: []
- types (Array[String]): Filters for work of the provided types. allowing: ['issue', 'ticket', 'task']
Past Actions:
- Returns the ID of the current user: who_am_i
- Returns the ID of the current sprint: get_sprint_id","{'result': [('owned_by', ['who_am_i']), ('issue.priority', ['p0'])]}"
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Assign developers to all tasks in the backlog
Tool: assign_users with args:
- tasks (Array[Object]): List of tasks to assign
- users (Array[String]): List of developers to assign to the tasks
Past Actions/Knowledge:
- List of developers: get_available_developers
- List of tasks in the backlog: get_backlog_tasks
- the ID of the current User: who_am_i","{'result': [('tasks', 'get_backlog_tasks'), ('users', 'get_available_developers')]}"
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Assign unresolved issues to U-123 and U-007 for resolution
Tool: issue_assigner with args:
- issues (Array[Object]): List of issues to assign
- assignees (Array[String]): List of team members to assign issues
Past Actions:
- Get the ID of the current User: who_am_i
- Get unresolved issues: get_unresolved_issues
- Identify team members for assignment: get_team_members","{'result': [('issues', 'get_unresolved_issues'), ('assignees', ['U-123', 'U-007'])]}"
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Get objects related to me
Tool: review_and_close with args:
- query (String): The search string, could be for example customer’s name, part name, user name.
Past Actions:
- Get the current sprint: get_current_sprint",{'missing_action': 'Get my work id'}
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Identify all my overdue tasks
Tool: filter_tasks with args:
- tasks (Array[Object]): List of tasks to filter
- status (Array[String]): The status of the tasks to filter allowing: ['Completed', 'In Progress', 'Overdue']
Past Actions:
- Get the ID of the current User: who_am_i
- Get all tasks assigned to me: get_my_assigned_tasks","{'result': [('tasks', 'get_my_assigned_tasks'), ('status', ['Overdue'])]}"
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Create a list of unresolved issues assigned to the current user
Tool: create_assigned_issues_list with args:
- issues (Array[Object]): List of unresolved issues assigned to the current user
Past Actions:
- Get the ID of the current User: who_am_i
- Retrieve unresolved issues assigned to the current user: get_assigned_unresolved_issues","{'result': [('issues', 'get_assigned_unresolved_issues')]}"
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Close all tasks in Project-A with the 'urgent' and 'lax' priority
Tool: close_tasks with args:
- tasks (Array[Object]): List of tasks to close
- priority (Array[String]): The priority of tasks to close, allowing [""urgent"", ""lax"", ""tight""]
Past Actions:
- Get the ID of the current User: who_am_i
- Get all tasks in Project-A: get_tasks_in_project","{'result': [('tasks', 'get_tasks_in_project'), ('priority', ['urgent', 'lax'])]}"
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Get objects related to DEVU234
Tool: review_and_close with args:
- query (String): The search string, could be for example customer’s name, part name, user name.
Past Actions:
- Get the ID of the current User: who_am_i
- Get the current sprint: get_current_sprint","{'result': [('query', 'DEVU234')]}"
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Pay user User-123 $100
Tool: pay_user with args:
- contact_details (Object): The contact details of the user
- amount (Number): The amount to pay the user
Past Actions/Knowledge:
- Returns user details of User-123: get_user_details
- the ID of the current User: who_am_i
- the current sprint: get_current_sprint","{'result': [('contact_details', 'get_user_details'), ('amount', 100)]}"
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Create issues from summarized work items
Tool: get_action_items_from_text with args:
- text (String): The text from which the actionable insights need to be created
Past Actions/Knowledge:
- Summarize the work items similar to TKT-123: summarize_objects
- Get the ID of the current User: who_am_i
- Get the current sprint: get_current_sprint","{'result': [('text', 'summarize_objects')]}"
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Assign tasks in the backlog to team members
Tool: assign_tasks with args:
- tasks (Array[Object]): List of tasks to assign
- team_members (Array[String]): List of team members to assign tasks to
Past Actions:
- Get the ID of the current User: who_am_i
- Get the backlog tasks: get_backlog_tasks",{'missing_action': 'Get the list of team members'}
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Create issues from summarized work items similar to TKT-123
Tool: get_action_items_from_text with args:
- text (String): The text from which the actionable insights need to be created
Past Actions/Knowledge:
- Summarize the work items similar to TKT-123: summarize_objects
- Get all work items similar to TKT-123: get_similar_work_items
- Get the ID of the current User: who_am_i
- Get the current sprint: get_current_sprint","{'result': [('text', 'summarize_objects')]}"
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Move all unresolved issues to the next sprint
Tool: move_issues with args:
- issues (Array[Object]): List of issues to move
- destination_sprint (String): The sprint to move the issues to
Past Actions/Knowledge:
- Returns List of unresolved issues: get_unresolved_issues
- Get the ID of the current User: who_am_i
- Return the next sprint: get_next_sprint","{'result': [('issues', 'get_unresolved_issues'), ('destination_sprint', 'get_next_sprint')]}"
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Send an email to User-123 regarding issue I-123.
Tool: send_email with args:
- to (String): The email address of the recipient
- from (String): The email address of the sender
- subject (String): The subject of the email
- body (String): The body of the email
Past Actions/Knowledge:
- Reutrn user details of User-123: get_user_details",{'missing_action': 'Summarize issue I-123'}
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Create an action items created from transcript T
Tool: create_actionable_tasks_from_text with args:
- text (String):The text from which the actionable insights need to be created
Past Actions/Knowledge:
- List of available priorities: get_available_priorities
- Get action items created from T: get_action_items_from_text
- Get Current backlog: get_backlog_issues
- Get the ID of the current User: who_am_i","{'result': [('text', 'T')]}"
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Create a report for all completed tasks in the last sprint
Tool: create_report with args:
- tasks (Array[Object]): List of tasks to include in the report
- sprint (String): The sprint for which the report is generated
Past Actions:
- Get the ID of the current User: who_am_i
- Get the completed tasks in the last sprint: get_task_info
- Get the last sprint: get_last_sprint","{'result': [('tasks', 'get_task_info'), ('sprint', 'get_last_sprint')]}"
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Find unresolved requests for features in the last release
Tool: find_issues with args:
- part_description (Array[String]): Part of the description of the issues to find
- organization (String): The organization of the issues to find
- name (String): The name of the issues to find
- issue_type (Array[String]): The type of issues to find allowing: [""Bug"", ""Feature Request"", ""Task""]
- status (Array[String]): The status of the issues to find allowing: [""Abandoned"", ""Resolved"", ""Unresolved""]
- release_version (String): The version of the release to search in
Past Actions:
- Get the ID of the current User: who_am_i
- Get the current sprint: get_current_sprint
- Get high-priority issues: get_high_priority_issues
- Get my manager issues: get_user_id
- Mail my manager: mail_user
- Get last release: get_last_release","{'result': [('issue_type', ['Feature Request']), ('status', ['Unresolved']), ('release_version', 'get_last_release')]}"
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Reassign unresolved issues to me and and my team members
Tool: reassign_issues with args:
- issues (Array[Object]): List of issues to reassign
- new_assignees (Array[String]): List of users to assign the issues to
Past Actions:
- Get the ID of the current User: who_am_i
- Get my team members: get_team_information",{'missing_action': 'Get unresolved issues'}
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Get my P0 issues on part DEV-PART-123
Tool:get_items with args:
- applies_to_part (Array[String]): Filters for work belonging to any of the provided parts.
- owned_by (Array[String]): Filters for work owned by any of these users
- created_by (Array[String]): Filters for work created by any of these users
- issue.priority (Array[String]): Filters for issues with any of the provided priorities allowing: [""p0"", ""p1"", ""p2"", ""p3""]
Past Actions/Knowledge:
- the ID of the current User: who_am_i","{'result': [('owned_by', ['who_am_i']), ('issue.priority', ['p0']), ('applies_to_part', ['DEV-PART-123'])]}"
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Update status of my tasks in the backlog to 'In Progress'
Tool: update_issue_status with args:
- issues (Array[Object]): List of issues to update
- new_status (String): The new status for the issues
Past Actions:
- Get the ID of the current User: who_am_i
- Get the current sprint: get_current_sprint",{'missing_action': 'Get the list of my tasks in the backlog'}
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Identify tasks with overdue deadlines in the 'Marketing' project
Tool: fetch_tasks with args:
- tasks (Array[Object]): List of tasks to check for overdue status
- projects (Array[String]): Name of the projects to filter tasks
- status (Array[String]): The status of the tasks to filter allowing: [""Completed"", ""In Progress"", ""Overdue""]
Past Actions:
- Get the ID of the current User: who_am_i
- Get tasks in the 'Marketing' project: get_tasks_in_project","{'result': [('projects', ['Marketing']), ('status', ['Overdue'])]}"
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Summarize the tasks completed by my team
Tool: summarize_objects with args:
- objects (Array[Object]): The objects to summarize
Past Actions/Knowledge:
- the ID of the current User: who_am_i
- the current sprint: get_current_sprint",{'missing_action': 'Get completed tasks by my team'}
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Assign tasks in the backlog to team members
Tool: assign_tasks with args:
- tasks (Array[Object]): List of tasks to assign
- team_members (Array[String]): List of team members to assign tasks to
Past Actions:
- Get the ID of the current User: who_am_i
- Get my team members: get_team_information",{'missing_action': 'Get the list of backlog tasks'}
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Create action items from meeting transcript T
Tool: get_action_items_from_text with args:
- text (String): The text from which the actionable insights need to be created
Past Actions/Knowledge:
- Get the ID of the current User: who_am_i
- Get the current sprint: get_current_sprint","{'result': [('text', 'T')]}"
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Get my issues on all objects made by MAN-123
Tool:get_items with args:
- applies_to_part (String): Filters for work belonging to any of the provided parts.
- owned_by (String): Filters for work owned by any of these users
- created_by (String): Filters for work created by any of these users
- issue.priority (String): Filters for issues with any of the provided priorities allowing: [""p0"", ""p1"", ""p2"", ""p3""]
Past Actions/Knowledge:
- Returns all parts containing the word ""AI"": get_objects_by_keyword
- the ID of the current User: who_am_i
- the current sprint: get_current_sprint","{'result': [('owned_by', 'who_am_i'), ('created_by', 'MAN-123')]}"
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive:Summarize the high severity tickets coming in from slack from customer Cust123
Tool: summarize_objects with args:
- objects (Array[Object]): List of objects to summarize
Past Actions:
- Returns the ID of the current user: who_am_i
- Returns the ID of the current sprint: get_sprint_id",{'missing_action': 'Get high severity tickets coming in from slack from customer Cust123'}
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Update the priority of high-priority tasks
Tool: update_priority with args:
- tasks (Array[Object]): List of tasks to update
- new_priority (String): The new priority for the tasks allowing: [""high"", ""low"", ""medium""]
Past Actions:
- Get the ID of the current User: who_am_i
- Get all high-priority tasks: get_high_priority_tasks","{'result': [('tasks', 'get_high_priority_tasks'), ('new_priority', 'high')]}"
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Close all unresolved issues
Tool: close_issues with args:
- issues (Array[Object]): List of issues to close
Past Actions/Knowledge:",{'missing_action': 'Get the list of unresolved issues'}
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Close all unresolved bugs in the system
Tool: close_issues with args:
- issues (Array[Object]): List of issues to close
- issue.type (String): Filters for issues by the type [""Bug"", ""Feature"", ""Optimisation""]
- issue.status (String): Filters for issues by the status allowing [""Unresolved"", ""Resolved"", ""Abandoned""]
Past Actions/Knowledge:
- Get the list of all bugs: get_all_bugs","{'result': [('issues', 'get_all_bugs'), ('issue.type', 'Bug'), ('issue.status', 'Unresolved')]}"
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Create issues from summarized work items similar to TKT-123
Tool: get_action_items_from_text with args:
- text (String): The text from which the actionable insights need to be created
Past Actions/Knowledge:
- Summarize the work items similar to TKT-123: summarize_objects
- Get all work items similar to TKT-123: get_similar_work_items
- Get the ID of the current User: who_am_i
- Get the current sprint: get_current_sprint","{'result': [('text', 'summarize_objects')]}"
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Get related objects to part ABC-1234
Tool: review_and_close with args:
- query (String): The search string, could be for example customer’s name, part name, user name.
Past Actions:
- Get the ID of the current User: who_am_i
- Get the current sprint: get_current_sprint","{'result': [('query', 'ABC-1234')]}"
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Create a new issue with the summary ""Fix bug in AI""
Tool:create_issue with args:
- summary (String): A brief, one-sentence description of the issue
- description (String): A detailed description of the issue
- priority (String): Priority of the issue allowing: [""High"", ""Medium"", ""Low"", ""Blocker""]
- backlog (String): The backlog to add the issue to
Past Actions/Knowledge:
- List of available priorities: get_available_priorities
- Get the ID of the current User: who_am_i
- the current sprint: get_current_sprint","{'result': [('summary', 'Fix bug in AI'), ('description', 'This is an issue to fix a bug in AI')]}"
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Send an email to User-123 regarding issue I-123.
Tool: send_email with args:
- to (String): The email address of the recipient
- subject (String): The subject of the email
- body (String): The body of the email
Past Actions/Knowledge:
- Get the ID of the current User: who_am_i
- Get the current sprint: get_current_sprint",{'missing_action': 'Get user details of User-123'}
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Commit my changes to the current repository on a branch named ""feature-123""
Tool:commit_changes with args:
- repository (String): The repository to commit to
- description (String): A detailed description of the commit
- branch (String): The branch to commit to
Past Actions/Knowledge:
- Get the name of the current branch: get_current_branch
- Get the name current repository: get_current_repository",{'missing_action': 'Get the commit change description summary'}
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Show a list of my tasks pending review by the project manager
Tool: get_info_on_tasks with args:
- assigned_to (Array[String]): List of users to the tasks are assigned to
- status (Array[String]): The status of the tasks to filter allowing: [""Completed"", ""In Progress"", ""Overdue""]
- priority (String): The priority of the tasks to filter allowing: [""High"", ""Medium"", ""Low"", ""Blocker""]
- reviewers (Array[String]): User ids of the reviewers
Past Actions:
- Get the ID of the current User: who_am_i
- Get the id of the project manager: get_user_details","{'result': [('assigned_to', ['who_am_i']), ('reviewer', ['get_user_details'])]}"
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Generate a performance report for tasks completed in the last two sprints
Tool: generate_report with args:
- tasks (Array[Object]): List of tasks to include in the report
- include_details (Boolean): Whether to include detailed information in the report
- include_summary (Boolean): Whether to include summary information in the report
- rate_employee (Boolean): Whether to rate the employee in the report
Past Actions:
- Get the ID of the current User: who_am_i
- Get completed tasks in the last two sprints: get_task_information","{'result': [('tasks', 'get_task_information')]}"
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Identify tasks with overdue deadlines in the 'Marketing' project
Tool: filter_tasks with args:
- tasks (Array[Object]): List of tasks to check for overdue status
- status (String): The status of the tasks to filter allowing: [""Completed"", ""In Progress"", ""Overdue""]
Past Actions:
- Get the ID of the current User: who_am_i
- Get the current sprint: get_current_sprint
- Call my manager: call_user","{'missing_action': ""Get tasks in the 'Marketing' project""}"
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Get my issues on all objects created by MAN-123
Tool:get_items with args:
- applies_to_part (String): Filters for work belonging to any of the provided parts.
- owned_by (String): Filters for work owned by any of these users
- created_by (String): Filters for work created by any of these users
- issue.priority (String): Filters for issues with any of the provided priorities allowing: [""p0"", ""p1"", ""p2"", ""p3""]
Past Actions/Knowledge:
- Returns all parts containing the word ""AI"": get_objects_by_keyword
- the ID of the current User: who_am_i
- the current sprint: get_current_sprint","{'result': [('owned_by', 'who_am_i'), ('created_by', 'MAN-123')]}"
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Get issues owned by users U-123 and U-456 and with priorities P0 and P1
Tool:get_work_items with args:
- applies_to_part (Array[String]): Filters for work belonging to any of the provided parts.
- owned_by (Array[String]): Filters for work owned by any of these users
- created_by (Array[String]): Filters for work created by any of these users
- issue.priority (Array[String]): Filters for issues with any of the provided priorities allowing: [""p0"", ""p1"", ""p2"", ""p3""]
Past Actions/Knowledge:
- Get all parts containing the word ""AI"": get_objects_by_keyword
- the ID of the current User: who_am_i
- the current sprint: get_current_sprint","{'result': [('created_by', ['U-123', 'U-456']), ('issue.priority', ['p0', 'p1'])]}"
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Summarize all the completed tasks from the last sprint
Tool: summarize_objects with args:
- objects (Array[Object]): The objects to summarize
Past Actions/Knowledge:
- Get the id of the current user: who_am_i
- Get the id of the current sprint: get_current_sprint
- Get the name of the current branch: get_current_branch",{'missing_action': 'Get all the completed tasks from the last sprint'}
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Move all files with names starting with ""feature-file"" to the folder ""folder-123""
Tool:move_files with args:
- files (Array[String]): The files to move
- destination (String): The destination folder
Past Actions/Knowledge:
- Get files with names starting with ""feature-file"": get_files_by_name
- Get the name of the current branch: get_current_branch
- Get the name current repository: get_current_repository","{'result': [('files', 'get_files_by_name'), ('destination', 'folder-123')]}"
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Reassign unresolved issues to me and and my team members
Tool: assign_issues with args:
- issues (Array[Object]): List of issues to reassign
- assignees (Array[String]): List of users to assign the issues to
Past Actions:
- Get the ID of the current User: who_am_i
- Get my team members: get_team_information
- Get all unresolved issues: get_issues_by_filter","{'result': [('issues', 'get_issues_by_filter'), ('assignees', ['who_am_i', 'get_team_information'])]}"
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Prioritize my P0 issues
Tool:prioritize_objects with args:
- objects (Array[Object]): The objects to summarize
Past Actions/Knowledge:
- the ID of the current User: who_am_i",{'missing_action': 'Get my P0 issues'}
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Get my P0 issues on all objects containing the word ""AI""
Tool:get_items with args:
- applies_to_part (String): Filters for work belonging to any of the provided parts.
- owned_by (String): Filters for work owned by any of these users
- created_by (String): Filters for work created by any of these users
- issue.priority (String): Filters for issues with any of the provided priorities allowing: [""p0"", ""p1"", ""p2"", ""p3""]
Past Actions/Knowledge:
- Get all parts containing the word ""AI"": get_objects_by_keyword
- the ID of the current User: who_am_i","{'result': [('owned_by', 'who_am_i'), ('issue.priority', 'p0'), ('applies_to_part', 'get_objects_by_keyword')]}"
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Schedule a meeting for Task 1, Task 2 and Task 3 today
Tool: schedule_meeting with args:
- meeting_date (String): The date for the meeting
- tasks (Array[Object]): List of tasks to discuss
Past Actions:
- Get the ID of the current User: who_am_i
- Get high priority tasks: get_tasks
- Get the current sprint: get_current_sprint","{'result': [('meeting_date', 'DATE_TODAY'), ('tasks', ['Task 1', 'Task 2', 'Task 3'])]}"
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Summarize my open tasks
Tool: summarize_objects with args:
- objects (Array[Object]): The objects to summarize
Past Actions/Knowledge:",{'missing_action': 'Get my open tasks'}
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Get high severity tickets from the customer UltimateCustomer
Tool: works_list with args:
- applies_to_part (Array[String]): Filters for work belonging to any of the provided parts.
- created_by (Array[String]): Filters for work created by any of these users.
- owned_by (Array[String]): Filters for work owned by any of these users.
- issue.rev_orgs (Array[String]): Filters for issues with any of the provided Rev organizations
- issue.priority (Array[String]): Filters for issues with any of the provided priorities allowing: ['p0', 'p1', 'p2', 'p3']
- limit (Number): The maximum number of works to return.
- stage.name (Array[String]): Filters for records in the provided stage(s) by name
- ticket.needs_response (Boolean): Filters for tickets that need a response
- ticket.severity (Array[String]): Filters for tickets with any of the provided severities allowing: ['blocker', 'high', 'low', 'medium']
- ticket.source_channel (Array[String]): Filters for tickets with any of the provided source channels allowing: []
- types (Array[String]): Filters for work of the provided types. allowing: ['issue', 'ticket', 'task']
Past Actions:
- Returns the ID of the current user: who_am_i
- Returns the ID of the current sprint: get_sprint_id",{'missing_action': 'Get objects related to customer UltimateCustomer'}
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Assign a UI/UX designer to tasks in sprint S-456
Tool: assign_user with args:
- task_keys (Array[String]): The keys of the tasks to assign
- user_key (Array[String]): The key of the UI/UX designer to assign to the issue
Past Actions/Knowledge:
- List of available UI/UX designers: get_available_workers
- Get tasks in sprint S-456: get_tasks_in_sprint
- the ID of the current User: who_am_i
- the current sprint: get_current_sprint","{'result': [('task_keys', 'get_tasks_in_sprint'), ('user_key', 'get_available_workers')]}"
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Get all high severity tickets coming in from slack from customer Cust123
Tool: works_list with args:
- applies_to_part (Array[String]): Filters for work belonging to any of the provided parts.
- created_by (Array[String]): Filters for work created by any of these users.
- owned_by (Array[String]): Filters for work owned by any of these users.
- issue.rev_orgs (Array[String]): Filters for issues with any of the provided Rev organizations
- issue.priority (Array[String]): Filters for issues with any of the provided priorities allowing: ['p0', 'p1', 'p2', 'p3']
- limit (Number): The maximum number of works to return.
- stage.name (Array[String]): Filters for records in the provided stage(s) by name
- ticket.needs_response (Boolean): Filters for tickets that need a response
- ticket.severity (Array[String]): Filters for tickets with any of the provided severities allowing: ['blocker', 'high', 'low', 'medium']
- ticket.source_channel (Array[String]): Filters for tickets with any of the provided source channels allowing: []
- types (Array[String]): Filters for work of the provided types. allowing: ['issue', 'ticket', 'task']
Past Actions:
- Get objects related to customer Cust123: search_objects_by_name
- Returns the ID of the current user: who_am_i
- Returns the ID of the current sprint: get_sprint_id","{'result': [('applies_to_part', 'search_objects_by_name'), ('ticket.severity', 'high')]}"
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Identify and prioritize tasks with a due date within the next week
Tool: prioritize_due_within_week with args:
- tasks (Array[Object]): List of tasks to prioritize
Past Actions:
- Get the ID of the current User: who_am_i
- Retrieve tasks with due date within the next week: get_tasks_details","{'result': [('tasks', 'get_tasks_details')]}"
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Reassign unresolved issues to me and User-123
Tool: reassign_issues with args:
- issues (Array[Object]): List of issues to reassign
- new_assignees (Array[String]): List of users to assign the issues to
Past Actions:
- Get the ID of the current User: who_am_i",{'missing_action': 'Get unresolved issues'}
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Create a new issue with the summary ""Fix bug in AI"" and the description ""This is a bug in AI""
Tool:create_issue with args:
- summary (String): A brief, one-sentence description of the issue
- description (String): A detailed description of the issue
- priority (String): Priority of the issue allowing: [""High"", ""Medium"", ""Low"", ""Blocker""]
- backlog (String): The backlog to add the issue to
Past Actions/Knowledge:
- List of available priorities: get_available_priorities
- Get the ID of the current User: who_am_i
- the current sprint: get_current_sprint","{'result': [('summary', 'Fix bug in AI'), ('description', 'This is a bug in AI')]}"
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Update priority of my tasks in the backlog to HIGH
Tool: update_issue_properties with args:
- issues (Array[Object]): List of issues to update
- new_status (String): The new status for the issues
- priority (String): The new priority for the issues allowing: [""high"", ""low"", ""medium""]
- sprint (String): The sprint to update the issues for
- notify (Boolean): Whether to notify the assignee of the issue about the update
Past Actions:
- Get the ID of the current User: who_am_i
- Get my tasks in backlog: get_related_tasks","{'result': [('issues', 'get_related_tasks'), ('priority', 'high')]}"
"Solve the 'Directive' with the given 'Tool'. Use values in 'Past Actions' or the provided directive and map values to arguments in the Tool. In case of missing info return a directive to get the missing info required to get missing info.
Directive: Generate a trend analysis report for Google Stadia's completion time
Tool: generate_trend_report with args:
- type (String): The type of the report to generate, allowing: [""completion_time"", ""completion_rate"", ""resource_utilization""]
- project_name (String): Name of the project for analysis
Past Actions:
- Get the ID of the current User: who_am_i
- Retrieve tasks for trend analysis: get_tasks_for_trend_analysis","{'result': [('type', 'completion_time'), ('project_name', ""Google Stadia's"")]}"
