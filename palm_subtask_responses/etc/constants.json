{
  "argument_processing_prompt": "\nI have a argument for an function call. I want to summarize it and get its data type and possible values.\nFor Example:\n\nInput:{\"name\": \"ticket.severity\",\"description\": \"Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium\",\"type\": \"array of strings\"}\nOuput: {\"desc\": \"Filters for tickets with any of the provided severities\", \"type\": \"Array[String]\", \"allowed\": [\"blocker\", \"high\", \"low\", \"medium\"]}\n\nInput:{\"name\": \"query\",\"description\": \"The search string, could be for example customer's name, part name, user name.\",\"type\": \"string\"}\nOutput: {\"desc\": \"The search string, could be for example customer's name, part name, user name.\", \"type\": \"String\"}\n\nInput: {\"name\": \"limit\",\"description\": \"The maximum number of works to return. The default is '50'\",\"type\": \"integer (int32)\"}\nOutput: {\"desc\": \"The maximum number of works to return.\", \"type\": \"Number\"}\n\nInput: {\"name\": \"variance\", \"description\": \"The VAriance of the quantitiy. The default is '1'\",\"type\": \"float (float32)\"}\nOutput: {\"desc\": \"The maximum number of works to return.\", \"type\": \"Number\"}\n\nInput: {\"name\": \"applies_to_part\", \"description\": \"Filters for work belonging to any of the provided parts\", \"type\": \"array of strings\", \"example\": [ \"FEAT-123\", \"ENH-123\", \"PROD-123\", \"CAPL-123\" ]}\nOutput: {\"desc\": \"Filters for work belonging to any of the provided parts.\", \"type\": \"Array[String]\", \"example\": [\"FEAT-123\", \"ENH-123\", \"PROD-123\", \"CAPL-123\"]}\n\nsolve for the following argument ensuring output is valid json:\nInput: %s\nOutput:\n",
  "segmentation_prompt": "\nYou have sentence which contains a task statement. You need to perform coreference resolution and split it into multiple sentences containing simpler atomic subtasks without fabricating any information. E.g.:\nInput: Retrieve all tasks resembling TKT-123, condense the information, generate problem reports based on the summary, and arrange them in order of priority\nOutput: [\"Get tasks resembling TKT-123\",\"Summarize the tasks resembling TKT-123\",\"Generate reports from summarized tasks resembling TKT-123\",\"Prioritize the tasks resembling TKT-123\"]\n\nInput: Post an AI generated image on twitter. Monitor the number of likes and retweets. Perform analysis on the collected metrics.\nOutput: [\"Post AI generated image on twitter\",\"Monitor the AI generated post on twitter\",\"Analyze monitored metrics of the AI generated post on twitter\"]\n\nInput: Generate product reccommendations for the user User-123 based on the summary of all posts made by them.\nOutput: [\"Get all posts by User-123\",\"Summarize the posts by User-123\",\"Generate product reccommendations from summarized posts made by User-123\"]  \n\nInput: Add all issues P0 issues by User-123 to my sprint. Also create their summary.\nOutput: [\"Get all P0 issues by User-123\",\"Add P0 issues by User-123 to sprint\",\"Summarize the P0 issues by User-123\"]\n\nInput: Could you get all my high priority work items?\nOutput: [\"Get all my work items assigned high priority\"]\n\nInput: Obtain details on all feature requests, generate a summary, and prioritize feature development.\nOutput: [\"Get details on feature requests\",\"Summarize the details on feature requests\",\"Prioritize feature development from summarized details on feature requests\"]\n\nInput: Retrieve all tasks assigned to Team-A, condense the information, generate performance reports, and prioritize tasks.\nOutput: [\"Get tasks assigned to Team-A\",\"Summarize tasks assigned to Team-A\",\"Generate performance reports from tasks assigned to Team-A\",\"Prioritize tasks assigned to Team-A\"]\n\nInput: %s\nOutput:\n",
  "tool_getter_prompt": "\nYou a work management bot for a company with access to the following tools:\nYou need to return a tool (if any) that will complete the primary objective of the task using the tool descriptions. Return the empty string if not available Eg:\nTools:\nA: A tool that As\nB: A tool that Bs\nInput: A the task item\nOutput: A\nInput: B the task item\nOutput: B\nInput: C the task item\nOutput: None\n\nTools: %s\nInput: %s\nOuput:\n",
  "subtask_solution_prompt": "\nYou're a issue management bot. Given a tool and directive, you strictly use values in the Past Actions or the directive to map to argument values mentioned in the \"Tool\" Section. If there is some information missing you return the action to get the missing information. Eg:\n\nDirective:Summarize the work items similar to TKT-123\n\nTool:summarize_objects with args:\n- objects (Array[Object]): The objects to summarize\n\nPast Actions:\n- Prioritize the work items similar to TKT-123:prioritize_work_items\n- Get all similar work items to TKT-123: get_similar_work_items\n- Get the ID of the current User: who_am_i\n- Get the current sprint: get_current_sprint\n\nOutput:{\"result\":[(\"objects\",\"get_similar_work_items\")]}\n---\nDirective:Get my P0 issues on part DEV-PART-123\n\nTool:get_items with args:\n- applies_to_part (Array[String]): Filters for work belonging to any of the provided parts.\n- owned_by (Array[String]): Filters for work owned by any of these users\n- created_by (Array[String]): Filters for work created by any of these users\n- issue.priority (Array[String]): Filters for issues with any of the provided priorities allowing: ['p0', 'p1', 'p2', 'p3']\n\nPast Actions:\n- Get the ID of the current User: who_am_i\n- Get the current sprint: get_current_sprint\n\nOutput:{\"result\":[(\"owned_by\",\"who_am_i\"),(\"issue.priority\",\"p0\"),(\"applies_to_part\",\"DEV-PART-123\")]}\n---\nDirective: Close all unresolved issues\n\nTool: close_issues with args:\n- issues (Array[Object]): List of issues to close\n\nPast Actions:\n\nOutput: {\"missing_action\": \"Get the list of unresolved issues\"}\n---\nDirective: Move all tasks to the next sprint\n\nTool: move_issues with args:\n- issues (Array[Object]): List of issues to move\n- destination_sprint (String): The sprint to move the issues to\n\nPast Actions:\n- Get the ID of the current User: who_am_i\n- Get the next sprint: get_next_sprint\n\nOutput: {\"missing_action\": \"Get the list of all tasks\"}\n---\nDirective: Prioritize my P0 issues\n\nTool:prioritize_objects with args:\n- objects (Array[Object]): The objects to prioritze\n\nPast Actions:\n- Get the ID of the current User: who_am_i\n- Get the current sprint: get_current_sprint\n\nOutput: {\"missing_action\":\"Get my P0 issues\"}\n---\n",
  "examples": [
    "Summarize work items similar to don:core:dvrv-us-1:devo/0:issue/1",
    "What is the meaning of life?",
    "Prioritize my P0 issues and add them to the current sprint",
    "Summarize high severity tickets from the customer UltimateCustomer",
    "What are my all issues in the triage stage under part FEAT-123? Summarize them.",
    "List all high severity tickets coming in from slack from customer Cust123 and generate a summary of them.",
    "Given a customer meeting transcript T, create action items and add them to my current sprint",
    "Get all work items similar to TKT-123, summarize them, create issues from that summary, and prioritize them"
  ],
  "tools": [
    {
      "name": "works_list",
      "description": "Returns a list of work items matching the request",
      "arguments": [
        {
          "name": "applies_to_part",
          "description": "Filters for work belonging to any of the provided parts",
          "type": "array of strings",
          "example": ["FEAT-123", "ENH-123", "PROD-123", "CAPL-123"]
        },
        {
          "name": "created_by",
          "description": "Filters for work created by any of these users",
          "type": "array of strings",
          "example": ["DEVU-123"]
        },
        {
          "name": "owned_by",
          "description": "Filters for work owned by any of these users",
          "type": "array of strings",
          "example": ["DEVU-123"]
        },
        {
          "name": "issue.rev_orgs",
          "description": "Filters for issues with any of the provided Rev organizations",
          "type": "array of strings",
          "example": ["REV-123"]
        },
        {
          "name": "issue.priority",
          "description": "Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3",
          "type": "array of strings"
        },
        {
          "name": "limit",
          "description": "The maximum number of works to return. The default is '50'",
          "type": "integer (int32)"
        },
        {
          "name": "stage.name",
          "description": "Filters for records in the provided stage(s) by name",
          "type": "array of strings"
        },
        {
          "name": "ticket.needs_response",
          "description": "Filters for tickets that need a response",
          "type": "boolean"
        },
        {
          "name": "ticket.severity",
          "description": "Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium",
          "type": "array of strings"
        },
        {
          "name": "ticket.source_channel",
          "description": "Filters for tickets with any of the provided source ch ",
          "type": "array of strings"
        },
        {
          "name": "types",
          "description": "Filters for work of the provided types. Allowed values: issue, ticket, task",
          "type": "array of strings"
        }
      ]
    },
    {
      "name": "summarize_objects",
      "description": "Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail.",
      "arguments": [
        {
          "name": "objects",
          "description": "List of objects to summarize",
          "type": "array of objects"
        }
      ]
    },
    {
      "name": "prioritize_objects",
      "description": "Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail.",
      "arguments": [
        {
          "name": "objects",
          "description": "A list of objects to be prioritized",
          "type": "array of objects"
        }
      ]
    },
    {
      "name": "add_work_items_to_sprint",
      "description": "Adds the given work items to the sprint",
      "arguments": [
        {
          "name": "work_ids",
          "description": "A list of work item IDs to be added to the sprint.",
          "type": "array of strings"
        },
        {
          "name": "sprint_id",
          "description": "The ID of the sprint to which the work items should be added",
          "type": "string"
        }
      ]
    },
    {
      "name": "get_sprint_id",
      "description": "Returns the ID of the current sprint"
    },
    {
      "name": "get_similar_work_items",
      "description": "Returns a list of work items that are similar to the given work item",
      "arguments": [
        {
          "name": "work_id",
          "description": "The ID of the work item for which you want to find similar items",
          "type": "string"
        }
      ]
    },
    {
      "name": "search_object_by_name",
      "description": "Given a search string, returns the id of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest.",
      "arguments": [
        {
          "name": "query",
          "description": "The search string, could be for example customer’s name, part name, user name.",
          "type": "string"
        }
      ]
    },
    {
      "name": "create_actionable_tasks_from_text",
      "description": "Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item.",
      "arguments": [
        {
          "name": "text",
          "description": "The text from which the actionable insights need to be created.",
          "type": "string"
        }
      ]
    },
    {
      "name": "who_am_i",
      "description": "Returns the ID of the current user"
    }
  ]
}
